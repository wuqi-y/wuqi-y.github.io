<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用node-qrcode生成二维码</title>
      <link href="/2024/03/13/shi-yong-node-qrcode-sheng-cheng-er-wei-ma/"/>
      <url>/2024/03/13/shi-yong-node-qrcode-sheng-cheng-er-wei-ma/</url>
      
        <content type="html"><![CDATA[<h3 id="html中直接使用"><a href="#html中直接使用" class="headerlink" title="html中直接使用"></a>html中直接使用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Skipped minification because the original files appears to be already minified. * Original file: /npm/qrcode@1.5.1/build/qrcode.js * * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files */</span><span class="token keyword">var</span> <span class="token function-variable function">QRCode</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token punctuation">,</span><span class="token function-variable function">e</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> Promise<span class="token operator">&amp;&amp;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token operator">&amp;&amp;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then<span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">172</span><span class="token punctuation">,</span><span class="token number">196</span><span class="token punctuation">,</span><span class="token number">242</span><span class="token punctuation">,</span><span class="token number">292</span><span class="token punctuation">,</span><span class="token number">346</span><span class="token punctuation">,</span><span class="token number">404</span><span class="token punctuation">,</span><span class="token number">466</span><span class="token punctuation">,</span><span class="token number">532</span><span class="token punctuation">,</span><span class="token number">581</span><span class="token punctuation">,</span><span class="token number">655</span><span class="token punctuation">,</span><span class="token number">733</span><span class="token punctuation">,</span><span class="token number">815</span><span class="token punctuation">,</span><span class="token number">901</span><span class="token punctuation">,</span><span class="token number">991</span><span class="token punctuation">,</span><span class="token number">1085</span><span class="token punctuation">,</span><span class="token number">1156</span><span class="token punctuation">,</span><span class="token number">1258</span><span class="token punctuation">,</span><span class="token number">1364</span><span class="token punctuation">,</span><span class="token number">1474</span><span class="token punctuation">,</span><span class="token number">1588</span><span class="token punctuation">,</span><span class="token number">1706</span><span class="token punctuation">,</span><span class="token number">1828</span><span class="token punctuation">,</span><span class="token number">1921</span><span class="token punctuation">,</span><span class="token number">2051</span><span class="token punctuation">,</span><span class="token number">2185</span><span class="token punctuation">,</span><span class="token number">2323</span><span class="token punctuation">,</span><span class="token number">2465</span><span class="token punctuation">,</span><span class="token number">2611</span><span class="token punctuation">,</span><span class="token number">2761</span><span class="token punctuation">,</span><span class="token number">2876</span><span class="token punctuation">,</span><span class="token number">3034</span><span class="token punctuation">,</span><span class="token number">3196</span><span class="token punctuation">,</span><span class="token number">3362</span><span class="token punctuation">,</span><span class="token number">3532</span><span class="token punctuation">,</span><span class="token number">3706</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">o</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'"version" cannot be null or undefined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>t<span class="token operator">&gt;</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'"version" should be in range from 1 to 40'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">4</span><span class="token operator">*</span>t<span class="token operator">+</span><span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">a</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> n<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">i</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">!==</span>t<span class="token punctuation">;</span><span class="token punctuation">)</span>r<span class="token operator">++</span><span class="token punctuation">,</span>t<span class="token operator">&gt;&gt;&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">u</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'"toSJISFunc" is not a valid function.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token operator">=</span>t<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">s</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>r<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">f</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">r</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">t</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">exports</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>exports<span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token constant">L</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">M</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">H</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">isValid</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>t<span class="token punctuation">.</span>bit<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>bit<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>bit<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">from</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Param is not a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span><span class="token string">"l"</span><span class="token operator">:</span><span class="token keyword">case</span><span class="token string">"low"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">L</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"m"</span><span class="token operator">:</span><span class="token keyword">case</span><span class="token string">"medium"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"q"</span><span class="token operator">:</span><span class="token keyword">case</span><span class="token string">"quartile"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"h"</span><span class="token operator">:</span><span class="token keyword">case</span><span class="token string">"high"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Unknown EC Level: "</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token constant">L</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>isValid<span class="token punctuation">,</span>g<span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&gt;&gt;&gt;</span><span class="token number">7</span><span class="token operator">-</span>t<span class="token operator">%</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">put</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putBit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span>t<span class="token operator">&gt;&gt;&gt;</span>r<span class="token operator">-</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">getLengthInBits</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">putBit</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span>r<span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">|=</span><span class="token number">128</span><span class="token operator">&gt;&gt;&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> d<span class="token operator">=</span>g<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token operator">||</span>t<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"BitMatrix size must be defined and greater than 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">=</span>t<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reservedBit<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span>l<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">set</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>t<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">+</span>r<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">,</span>n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reservedBit<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">+</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">xor</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>t<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">+</span>r<span class="token punctuation">]</span><span class="token operator">^=</span>e<span class="token punctuation">}</span><span class="token punctuation">,</span>l<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">isReserved</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reservedBit<span class="token punctuation">[</span>t<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">+</span>r<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> v<span class="token operator">=</span>l<span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span>o<span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function-variable function">getRowColCoords</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">===</span>t<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">e</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">145</span><span class="token operator">===</span>n<span class="token operator">?</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>o<span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getPositions</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">getRowColCoords</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span>n<span class="token punctuation">.</span>length<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>o<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>o<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">===</span>a<span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">===</span>i<span class="token operator">||</span><span class="token number">0</span><span class="token operator">===</span>a<span class="token operator">&amp;&amp;</span>i<span class="token operator">===</span>o<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>a<span class="token operator">===</span>o<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">===</span>i<span class="token operator">||</span>e<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>getRowColCoords<span class="token punctuation">,</span>p<span class="token punctuation">.</span>getPositions<span class="token punctuation">;</span><span class="token keyword">var</span> w<span class="token operator">=</span>o<span class="token punctuation">,</span><span class="token function-variable function">m</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token function">w</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">E</span><span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span>Patterns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">PATTERN000</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">PATTERN001</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">PATTERN010</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token constant">PATTERN011</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token constant">PATTERN100</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token constant">PATTERN101</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token constant">PATTERN110</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token constant">PATTERN111</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN000</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">(</span>e<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN001</span><span class="token operator">:</span><span class="token keyword">return</span> e<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN010</span><span class="token operator">:</span><span class="token keyword">return</span> n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN011</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">(</span>e<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN100</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>e<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN101</span><span class="token operator">:</span><span class="token keyword">return</span> e<span class="token operator">*</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">+</span>e<span class="token operator">*</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN110</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">(</span>e<span class="token operator">*</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">+</span>e<span class="token operator">*</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">case</span> r<span class="token punctuation">.</span>Patterns<span class="token punctuation">.</span><span class="token constant">PATTERN111</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">(</span>e<span class="token operator">*</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">+</span><span class="token punctuation">(</span>e<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"bad maskPattern:"</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function-variable function">isValid</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token operator">!=</span>t<span class="token operator">&amp;&amp;</span><span class="token string">""</span><span class="token operator">!==</span>t<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">from</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getPenaltyN1</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>o<span class="token operator">=</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>u<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> h<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token operator">===</span>i<span class="token operator">?</span>o<span class="token operator">++</span><span class="token operator">:</span><span class="token punctuation">(</span>o<span class="token operator">&gt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">+=</span>e<span class="token operator">+</span><span class="token punctuation">(</span>o<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>h<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>h<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">===</span>u<span class="token operator">?</span>a<span class="token operator">++</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">+=</span>e<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span>h<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>o<span class="token operator">&gt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">+=</span>e<span class="token operator">+</span><span class="token punctuation">(</span>o<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">&gt;=</span><span class="token number">5</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">+=</span>e<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getPenaltyN2</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> i<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token operator">!==</span>i<span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">!==</span>i<span class="token operator">||</span>e<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token operator">*</span>n<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getPenaltyN3</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token operator">=</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span>n<span class="token operator">=</span>n<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">2047</span><span class="token operator">|</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">&gt;=</span><span class="token number">10</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">1488</span><span class="token operator">===</span>n<span class="token operator">||</span><span class="token number">93</span><span class="token operator">===</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>e<span class="token operator">++</span><span class="token punctuation">,</span>a<span class="token operator">=</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token number">2047</span><span class="token operator">|</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">&gt;=</span><span class="token number">10</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">1488</span><span class="token operator">===</span>a<span class="token operator">||</span><span class="token number">93</span><span class="token operator">===</span>a<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>e<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token operator">*</span>o<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getPenaltyN4</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token operator">=</span>t<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>e<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>r<span class="token operator">+=</span>t<span class="token punctuation">.</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>r<span class="token operator">/</span>e<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span>a<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">applyMask</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span>r<span class="token punctuation">.</span>size<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>e<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>e<span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">isReserved</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">||</span>r<span class="token punctuation">.</span><span class="token function">xor</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token function">i</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getBestMask</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Patterns<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">e</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">applyMask</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> u<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">getPenaltyN1</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getPenaltyN2</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getPenaltyN3</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">getPenaltyN4</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">applyMask</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">&lt;</span>a<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token operator">=</span>u<span class="token punctuation">,</span>o<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> o<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">E</span><span class="token punctuation">.</span>Patterns<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>isValid<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>getPenaltyN1<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>getPenaltyN2<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>getPenaltyN3<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>getPenaltyN4<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>applyMask<span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span>getBestMask<span class="token punctuation">;</span><span class="token keyword">var</span> y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">A</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">192</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">192</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">264</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">260</span><span class="token punctuation">,</span><span class="token number">308</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">,</span><span class="token number">288</span><span class="token punctuation">,</span><span class="token number">352</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">,</span><span class="token number">384</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">432</span><span class="token punctuation">,</span><span class="token number">144</span><span class="token punctuation">,</span><span class="token number">280</span><span class="token punctuation">,</span><span class="token number">408</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">,</span><span class="token number">168</span><span class="token punctuation">,</span><span class="token number">308</span><span class="token punctuation">,</span><span class="token number">448</span><span class="token punctuation">,</span><span class="token number">532</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">338</span><span class="token punctuation">,</span><span class="token number">504</span><span class="token punctuation">,</span><span class="token number">588</span><span class="token punctuation">,</span><span class="token number">196</span><span class="token punctuation">,</span><span class="token number">364</span><span class="token punctuation">,</span><span class="token number">546</span><span class="token punctuation">,</span><span class="token number">650</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">416</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">442</span><span class="token punctuation">,</span><span class="token number">644</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">252</span><span class="token punctuation">,</span><span class="token number">476</span><span class="token punctuation">,</span><span class="token number">690</span><span class="token punctuation">,</span><span class="token number">816</span><span class="token punctuation">,</span><span class="token number">270</span><span class="token punctuation">,</span><span class="token number">504</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">560</span><span class="token punctuation">,</span><span class="token number">810</span><span class="token punctuation">,</span><span class="token number">960</span><span class="token punctuation">,</span><span class="token number">312</span><span class="token punctuation">,</span><span class="token number">588</span><span class="token punctuation">,</span><span class="token number">870</span><span class="token punctuation">,</span><span class="token number">1050</span><span class="token punctuation">,</span><span class="token number">336</span><span class="token punctuation">,</span><span class="token number">644</span><span class="token punctuation">,</span><span class="token number">952</span><span class="token punctuation">,</span><span class="token number">1110</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">,</span><span class="token number">700</span><span class="token punctuation">,</span><span class="token number">1020</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">390</span><span class="token punctuation">,</span><span class="token number">728</span><span class="token punctuation">,</span><span class="token number">1050</span><span class="token punctuation">,</span><span class="token number">1260</span><span class="token punctuation">,</span><span class="token number">420</span><span class="token punctuation">,</span><span class="token number">784</span><span class="token punctuation">,</span><span class="token number">1140</span><span class="token punctuation">,</span><span class="token number">1350</span><span class="token punctuation">,</span><span class="token number">450</span><span class="token punctuation">,</span><span class="token number">812</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">1440</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">,</span><span class="token number">868</span><span class="token punctuation">,</span><span class="token number">1290</span><span class="token punctuation">,</span><span class="token number">1530</span><span class="token punctuation">,</span><span class="token number">510</span><span class="token punctuation">,</span><span class="token number">924</span><span class="token punctuation">,</span><span class="token number">1350</span><span class="token punctuation">,</span><span class="token number">1620</span><span class="token punctuation">,</span><span class="token number">540</span><span class="token punctuation">,</span><span class="token number">980</span><span class="token punctuation">,</span><span class="token number">1440</span><span class="token punctuation">,</span><span class="token number">1710</span><span class="token punctuation">,</span><span class="token number">570</span><span class="token punctuation">,</span><span class="token number">1036</span><span class="token punctuation">,</span><span class="token number">1530</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">,</span><span class="token number">570</span><span class="token punctuation">,</span><span class="token number">1064</span><span class="token punctuation">,</span><span class="token number">1590</span><span class="token punctuation">,</span><span class="token number">1890</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">1120</span><span class="token punctuation">,</span><span class="token number">1680</span><span class="token punctuation">,</span><span class="token number">1980</span><span class="token punctuation">,</span><span class="token number">630</span><span class="token punctuation">,</span><span class="token number">1204</span><span class="token punctuation">,</span><span class="token number">1770</span><span class="token punctuation">,</span><span class="token number">2100</span><span class="token punctuation">,</span><span class="token number">660</span><span class="token punctuation">,</span><span class="token number">1260</span><span class="token punctuation">,</span><span class="token number">1860</span><span class="token punctuation">,</span><span class="token number">2220</span><span class="token punctuation">,</span><span class="token number">720</span><span class="token punctuation">,</span><span class="token number">1316</span><span class="token punctuation">,</span><span class="token number">1950</span><span class="token punctuation">,</span><span class="token number">2310</span><span class="token punctuation">,</span><span class="token number">750</span><span class="token punctuation">,</span><span class="token number">1372</span><span class="token punctuation">,</span><span class="token number">2040</span><span class="token punctuation">,</span><span class="token number">2430</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">I</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">L</span><span class="token operator">:</span><span class="token keyword">return</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">M</span><span class="token operator">:</span><span class="token keyword">return</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token operator">:</span><span class="token keyword">return</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">H</span><span class="token operator">:</span><span class="token keyword">return</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">M</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">L</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">M</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">Q</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">case</span> c<span class="token punctuation">.</span><span class="token constant">H</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">A</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">N</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span><span class="token number">255</span><span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token constant">N</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">,</span><span class="token constant">B</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span><span class="token number">256</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>t<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">^=</span><span class="token number">285</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span><span class="token number">512</span><span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token constant">N</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">N</span><span class="token punctuation">[</span>e<span class="token operator">-</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">C</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">N</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">P</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">===</span>t<span class="token operator">||</span><span class="token number">0</span><span class="token operator">===</span>r<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token constant">N</span><span class="token punctuation">[</span><span class="token constant">B</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token constant">B</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">R</span><span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function-variable function">mul</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token operator">+</span>r<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>r<span class="token punctuation">.</span>length<span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span>e<span class="token punctuation">[</span>n<span class="token operator">+</span>o<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token constant">P</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">mod</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span>length<span class="token operator">-</span>r<span class="token punctuation">.</span>length<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>r<span class="token punctuation">.</span>length<span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span>e<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token constant">P</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">===</span>e<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span>a<span class="token operator">++</span><span class="token punctuation">;</span>e<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">generateECPolynomial</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>t<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>e<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">T</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>genPoly<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token operator">=</span>t<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token operator">&amp;&amp;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token constant">R</span><span class="token punctuation">.</span>mul<span class="token punctuation">,</span><span class="token constant">R</span><span class="token punctuation">.</span>mod<span class="token punctuation">,</span><span class="token constant">R</span><span class="token punctuation">.</span>generateECPolynomial<span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">initialize</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token operator">=</span>t<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>genPoly<span class="token operator">=</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">generateECPolynomial</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">encode</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>genPoly<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Encoder not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token punctuation">)</span><span class="token punctuation">;</span>r<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>genPoly<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token operator">-</span>e<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>degree<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">}</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">L</span><span class="token operator">=</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token function-variable function">b</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">&lt;=</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">U</span><span class="token operator">=</span><span class="token string">"(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+"</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token string">"(?:(?![A-Z0-9 $%*+\\-./:]|"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token constant">U</span><span class="token operator">=</span><span class="token constant">U</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">"\\u"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")(?:.|[\r\n]))+"</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token constant">U</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">F</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[^A-Z0-9 $%*+\\-./:]+"</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">S</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">D</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[0-9]+"</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">Y</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"[A-Z $%*+\\-./:]+"</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>_<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^"</span><span class="token operator">+</span><span class="token constant">U</span><span class="token operator">+</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^[0-9]+$"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">H</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^[A-Z0-9 $%*+\\-./:]+$"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">J</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">KANJI</span><span class="token operator">:</span>k<span class="token punctuation">,</span><span class="token constant">BYTE_KANJI</span><span class="token operator">:</span><span class="token constant">F</span><span class="token punctuation">,</span><span class="token constant">BYTE</span><span class="token operator">:</span><span class="token constant">S</span><span class="token punctuation">,</span><span class="token constant">NUMERIC</span><span class="token operator">:</span><span class="token constant">D</span><span class="token punctuation">,</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">:</span><span class="token constant">Y</span><span class="token punctuation">,</span><span class="token function-variable function">testKanji</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">testNumeric</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> z<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">testAlphanumeric</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">H</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"Numeric"</span><span class="token punctuation">,</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">ccBits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"Alphanumeric"</span><span class="token punctuation">,</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">ccBits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"Byte"</span><span class="token punctuation">,</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token literal-property property">ccBits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">"Kanji"</span><span class="token punctuation">,</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token literal-property property">ccBits</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token constant">MIXED</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">bit</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getCharCountIndicator</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span>ccBits<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid mode: "</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">b</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid version: "</span><span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;</span><span class="token number">10</span><span class="token operator">?</span>t<span class="token punctuation">.</span>ccBits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span>r<span class="token operator">&lt;</span><span class="token number">27</span><span class="token operator">?</span>t<span class="token punctuation">.</span>ccBits<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>t<span class="token punctuation">.</span>ccBits<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getBestModeForData</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">J</span><span class="token punctuation">.</span><span class="token function">testNumeric</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">?</span>r<span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token operator">:</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token function">testAlphanumeric</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">?</span>r<span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">:</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token function">testKanji</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">?</span>r<span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">:</span>r<span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">toString</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid mode"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">isValid</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>bit<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>ccBits<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">from</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Param is not a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span><span class="token string">"numeric"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"alphanumeric"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"kanji"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"byte"</span><span class="token operator">:</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Unknown mode: "</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">MIXED</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span>getCharCountIndicator<span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span>getBestModeForData<span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span>isValid<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">O</span><span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token number">7973</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">getCharCountIndicator</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token operator">+=</span>o<span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function-variable function">from</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">b</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">parseInt</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span>r<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getCapacity</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">b</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid QR Code version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>e<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token number">8</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token constant">M</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">===</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">MIXED</span><span class="token punctuation">)</span><span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token operator">=</span>o<span class="token operator">-</span><span class="token function">n</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token operator">:</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">:</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">11</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">:</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getBestVersionForData</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token punctuation">,</span>a<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">&lt;=</span><span class="token number">40</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">o</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&lt;=</span>r<span class="token punctuation">.</span><span class="token function">getCapacity</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">MIXED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">===</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">else</span> n<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>o<span class="token operator">&lt;=</span><span class="token number">40</span><span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">&lt;=</span>r<span class="token punctuation">.</span><span class="token function">getCapacity</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> o<span class="token punctuation">}</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getEncodedBits</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">b</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">||</span>t<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid QR Code version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token function">i</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span>e<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>r<span class="token operator">^=</span><span class="token number">7973</span><span class="token operator">&lt;&lt;</span><span class="token function">i</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">-</span>e<span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">|</span>r<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">.</span>getCapacity<span class="token punctuation">,</span><span class="token constant">O</span><span class="token punctuation">.</span>getBestVersionForData<span class="token punctuation">,</span><span class="token constant">O</span><span class="token punctuation">.</span>getEncodedBits<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">Q</span><span class="token operator">=</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token number">1335</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function-variable function">V</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span>t<span class="token punctuation">.</span>bit<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">|</span>r<span class="token punctuation">,</span>n<span class="token operator">=</span>e<span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">i</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token constant">Q</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>n<span class="token operator">^=</span><span class="token number">1335</span><span class="token operator">&lt;&lt;</span><span class="token function">i</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token constant">Q</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">21522</span><span class="token operator">^</span><span class="token punctuation">(</span>e<span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token operator">|</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>mode<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>q<span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">3</span><span class="token operator">?</span>t<span class="token operator">%</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">+</span><span class="token number">3</span><span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>r<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">)</span>e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token operator">-</span>r<span class="token punctuation">;</span>o<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span>o<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> j<span class="token operator">=</span>q<span class="token punctuation">,</span>$<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token string">"G"</span><span class="token punctuation">,</span><span class="token string">"H"</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token string">"J"</span><span class="token punctuation">,</span><span class="token string">"K"</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token string">"N"</span><span class="token punctuation">,</span><span class="token string">"O"</span><span class="token punctuation">,</span><span class="token string">"P"</span><span class="token punctuation">,</span><span class="token string">"Q"</span><span class="token punctuation">,</span><span class="token string">"R"</span><span class="token punctuation">,</span><span class="token string">"S"</span><span class="token punctuation">,</span><span class="token string">"T"</span><span class="token punctuation">,</span><span class="token string">"U"</span><span class="token punctuation">,</span><span class="token string">"V"</span><span class="token punctuation">,</span><span class="token string">"W"</span><span class="token punctuation">,</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"Y"</span><span class="token punctuation">,</span><span class="token string">"Z"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"$"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">X</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>mode<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>t<span class="token punctuation">}</span><span class="token constant">X</span><span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">11</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>t<span class="token operator">%</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">X</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">X</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">X</span><span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">X</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">+</span><span class="token number">2</span><span class="token operator">&lt;=</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>r<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token number">45</span><span class="token operator">*</span>$<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token operator">+=</span>$<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token operator">%</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">Z</span><span class="token operator">=</span><span class="token constant">X</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">W</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>mode<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token string">"string"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function-variable function">t</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token operator">=</span>t<span class="token punctuation">.</span>length<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>e<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">&gt;=</span><span class="token number">55296</span><span class="token operator">&amp;&amp;</span>o<span class="token operator">&lt;=</span><span class="token number">56319</span><span class="token operator">&amp;&amp;</span>e<span class="token operator">&gt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">&gt;=</span><span class="token number">56320</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;=</span><span class="token number">57343</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token operator">=</span><span class="token number">1024</span><span class="token operator">*</span><span class="token punctuation">(</span>o<span class="token operator">-</span><span class="token number">55296</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token operator">-</span><span class="token number">56320</span><span class="token operator">+</span><span class="token number">65536</span><span class="token punctuation">,</span>n<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>o<span class="token operator">&lt;</span><span class="token number">128</span><span class="token operator">?</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">:</span>o<span class="token operator">&lt;</span><span class="token number">2048</span><span class="token operator">?</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token operator">&gt;&gt;</span><span class="token number">6</span><span class="token operator">|</span><span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token operator">&amp;</span>o<span class="token operator">|</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>o<span class="token operator">&lt;</span><span class="token number">55296</span><span class="token operator">||</span>o<span class="token operator">&gt;=</span><span class="token number">57344</span><span class="token operator">&amp;&amp;</span>o<span class="token operator">&lt;</span><span class="token number">65536</span><span class="token operator">?</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token operator">&gt;&gt;</span><span class="token number">12</span><span class="token operator">|</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token operator">&gt;&gt;</span><span class="token number">6</span><span class="token operator">&amp;</span><span class="token number">63</span><span class="token operator">|</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token operator">&amp;</span>o<span class="token operator">|</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>o<span class="token operator">&gt;=</span><span class="token number">65536</span><span class="token operator">&amp;&amp;</span>o<span class="token operator">&lt;=</span><span class="token number">1114111</span><span class="token operator">?</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token operator">&gt;&gt;</span><span class="token number">18</span><span class="token operator">|</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token operator">&gt;&gt;</span><span class="token number">12</span><span class="token operator">&amp;</span><span class="token number">63</span><span class="token operator">|</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o<span class="token operator">&gt;&gt;</span><span class="token number">6</span><span class="token operator">&amp;</span><span class="token number">63</span><span class="token operator">|</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token operator">&amp;</span>o<span class="token operator">|</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">239</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">,</span><span class="token number">189</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span>buffer<span class="token punctuation">}</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token constant">W</span><span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">8</span><span class="token operator">*</span>t<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token constant">W</span><span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">W</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>r<span class="token operator">&lt;</span>e<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">G</span><span class="token operator">=</span><span class="token constant">W</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">tt</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>mode<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>t<span class="token punctuation">}</span>tt<span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">13</span><span class="token operator">*</span>t<span class="token punctuation">}</span><span class="token punctuation">,</span>tt<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">,</span>tt<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getBitsLength</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> tt<span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>tt<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>r<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">&gt;=</span><span class="token number">33088</span><span class="token operator">&amp;&amp;</span>e<span class="token operator">&lt;=</span><span class="token number">40956</span><span class="token punctuation">)</span>e<span class="token operator">-=</span><span class="token number">33088</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>e<span class="token operator">&gt;=</span><span class="token number">57408</span><span class="token operator">&amp;&amp;</span>e<span class="token operator">&lt;=</span><span class="token number">60351</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid SJIS character: "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\nMake sure your charset is UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token operator">-=</span><span class="token number">49472</span><span class="token punctuation">}</span>e<span class="token operator">=</span><span class="token number">192</span><span class="token operator">*</span><span class="token punctuation">(</span>e<span class="token operator">&gt;&gt;&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> rt<span class="token operator">=</span>tt<span class="token punctuation">,</span>et<span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function-variable function">single_source_shortest_paths</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">,</span>u<span class="token punctuation">,</span>s<span class="token punctuation">,</span>f<span class="token punctuation">,</span>h<span class="token punctuation">,</span>c<span class="token punctuation">,</span>g<span class="token punctuation">,</span>d<span class="token operator">=</span>r<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span>s <span class="token keyword">in</span> u<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>f<span class="token operator">=</span>i<span class="token punctuation">.</span>cost<span class="token punctuation">,</span>h<span class="token operator">=</span>t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">=</span>f<span class="token operator">+</span>h<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span>g<span class="token operator">=</span>a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">||</span>g<span class="token operator">&gt;</span>c<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>n<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Could not find a path from "</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token string">" to "</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> o<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">extract_shortest_path_from_predecessor_list</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">;</span>n<span class="token punctuation">;</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">find_path</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">single_source_shortest_paths</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">extract_shortest_path_from_predecessor_list</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">PriorityQueue</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token function-variable function">make</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>e <span class="token keyword">in</span> t<span class="token operator">=</span>t<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>n<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>queue<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span>sorter<span class="token operator">=</span>t<span class="token punctuation">.</span>sorter<span class="token operator">||</span>n<span class="token punctuation">.</span>default_sorter<span class="token punctuation">,</span>o<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">default_sorter</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>cost<span class="token operator">-</span>r<span class="token punctuation">.</span>cost<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">push</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span>t<span class="token punctuation">,</span><span class="token literal-property property">cost</span><span class="token operator">:</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sorter<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">pop</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">empty</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">===</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span>exports<span class="token operator">=</span>r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nt<span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">null</span><span class="token operator">!==</span><span class="token punctuation">(</span>n<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>o<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">index</span><span class="token operator">:</span>n<span class="token punctuation">.</span>index<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span>n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> o<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token constant">J</span><span class="token punctuation">.</span><span class="token constant">BYTE_KANJI</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>index<span class="token operator">-</span>r<span class="token punctuation">.</span>index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>t<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span>t<span class="token punctuation">.</span>mode<span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span>t<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token operator">:</span><span class="token keyword">return</span> j<span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">Z</span><span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">:</span><span class="token keyword">return</span> rt<span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token constant">G</span><span class="token punctuation">.</span><span class="token function">getBitsLength</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">getBestModeForData</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>bit<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>bit<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token operator">+</span>t<span class="token operator">+</span><span class="token string">'" cannot be encoded with mode '</span><span class="token operator">+</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".\n Suggested mode is: "</span><span class="token operator">+</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>e<span class="token operator">!==</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">||</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">j</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">rt</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">G</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function-variable function">fromArray</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token string">"string"</span><span class="token operator">==</span><span class="token keyword">typeof</span> r<span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">i</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>r<span class="token punctuation">.</span>data<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">i</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">,</span>r<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">fromString</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token function-variable function">i</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">start</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"start"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> u<span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token operator">&lt;</span>u<span class="token punctuation">.</span>length<span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> h<span class="token operator">=</span>u<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">""</span><span class="token operator">+</span>i<span class="token operator">+</span>f<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">node</span><span class="token operator">:</span>h<span class="token punctuation">,</span><span class="token literal-property property">lastCount</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>g<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>length<span class="token punctuation">;</span>g<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> d<span class="token operator">=</span>o<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>mode<span class="token operator">===</span>h<span class="token punctuation">.</span>mode<span class="token operator">?</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>lastCount<span class="token operator">+</span>h<span class="token punctuation">.</span>length<span class="token punctuation">,</span>h<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">a</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>lastCount<span class="token punctuation">,</span>h<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>lastCount<span class="token operator">+=</span>h<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">.</span>lastCount<span class="token operator">=</span>h<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>length<span class="token punctuation">,</span>h<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">+</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">getCharCountIndicator</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token operator">=</span>s<span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>length<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span>n<span class="token punctuation">[</span>o<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token literal-property property">map</span><span class="token operator">:</span>n<span class="token punctuation">,</span><span class="token literal-property property">table</span><span class="token operator">:</span>e<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token operator">:</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>o<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>o<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span>o<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>o<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span>o<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">ALPHANUMERIC</span><span class="token operator">:</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>o<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>o<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span>o<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">KANJI</span><span class="token operator">:</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>o<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>o<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span><span class="token function">e</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token operator">:</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>o<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token literal-property property">mode</span><span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token constant">BYTE</span><span class="token punctuation">,</span><span class="token literal-property property">length</span><span class="token operator">:</span><span class="token function">e</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> r<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token function">o</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span>et<span class="token punctuation">.</span><span class="token function">find_path</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>map<span class="token punctuation">,</span><span class="token string">"start"</span><span class="token punctuation">,</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token operator">&lt;</span>u<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>table<span class="token punctuation">[</span>u<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span>t<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">?</span>t<span class="token punctuation">[</span>t<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>mode<span class="token operator">===</span>r<span class="token punctuation">.</span>mode<span class="token operator">?</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>t<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token operator">+=</span>r<span class="token punctuation">.</span>data<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">rawSplit</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span><span class="token function">o</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ot</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>a<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token constant">V</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>o<span class="token operator">=</span><span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">&lt;</span><span class="token number">6</span><span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">15</span><span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>a<span class="token operator">-</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>n<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token operator">-</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token operator">-</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">at</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">d</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>n<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>mode<span class="token punctuation">.</span>bit<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token punctuation">.</span><span class="token function">getCharCountIndicator</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>mode<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o<span class="token operator">=</span><span class="token number">8</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token constant">M</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">getLengthInBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">&lt;=</span>o<span class="token operator">&amp;&amp;</span>n<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span><span class="token function">getLengthInBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">8</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>n<span class="token punctuation">.</span><span class="token function">putBit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token punctuation">(</span>o<span class="token operator">-</span>n<span class="token punctuation">.</span><span class="token function">getLengthInBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span>n<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u<span class="token operator">%</span><span class="token number">2</span><span class="token operator">?</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">236</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token constant">M</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>n<span class="token operator">-</span>o<span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token constant">I</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span>u<span class="token operator">-</span>n<span class="token operator">%</span>u<span class="token punctuation">,</span>f<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token operator">/</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span>h<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i<span class="token operator">/</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>g<span class="token operator">=</span>f<span class="token operator">-</span>h<span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">L</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">E</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token constant">E</span><span class="token operator">&lt;</span>u<span class="token punctuation">;</span><span class="token constant">E</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> y<span class="token operator">=</span><span class="token constant">E</span><span class="token operator">&lt;</span>s<span class="token operator">?</span>h<span class="token operator">:</span>c<span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>l<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l<span class="token operator">+=</span>y<span class="token punctuation">,</span>w<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token constant">A</span><span class="token punctuation">,</span><span class="token constant">N</span><span class="token punctuation">,</span><span class="token constant">B</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">C</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token operator">&lt;</span>w<span class="token punctuation">;</span><span class="token constant">A</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token constant">N</span><span class="token operator">&lt;</span>u<span class="token punctuation">;</span><span class="token constant">N</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token constant">A</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">[</span><span class="token constant">C</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token operator">&lt;</span>g<span class="token punctuation">;</span><span class="token constant">A</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token constant">N</span><span class="token operator">&lt;</span>u<span class="token punctuation">;</span><span class="token constant">N</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token constant">B</span><span class="token punctuation">[</span><span class="token constant">C</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant">B</span><span class="token punctuation">}</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">it</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token operator">=</span>nt<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> u<span class="token operator">=</span>nt<span class="token punctuation">.</span><span class="token function">rawSplit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">.</span><span class="token function">getBestVersionForData</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span>a<span class="token operator">=</span>nt<span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>i<span class="token operator">||</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">.</span><span class="token function">getBestVersionForData</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"The amount of data is too big to be stored in a QR Code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>s<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">".\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span> r<span class="token operator">=</span>s<span class="token punctuation">;</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token function">at</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token function">o</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">v</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">m</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>o<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> a<span class="token operator">=</span>n<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span>n<span class="token punctuation">[</span>o<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>u<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token operator">+</span>u<span class="token operator">&lt;=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>e<span class="token operator">&lt;=</span>a<span class="token operator">+</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span>i<span class="token operator">+</span>s<span class="token operator">&lt;=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>e<span class="token operator">&lt;=</span>i<span class="token operator">+</span>s<span class="token operator">||</span><span class="token punctuation">(</span>u<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>u<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">===</span>s<span class="token operator">||</span><span class="token number">6</span><span class="token operator">===</span>s<span class="token punctuation">)</span><span class="token operator">||</span>s<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">===</span>u<span class="token operator">||</span><span class="token number">6</span><span class="token operator">===</span>u<span class="token punctuation">)</span><span class="token operator">||</span>u<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>u<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token operator">+</span>u<span class="token punctuation">,</span>i<span class="token operator">+</span>s<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token operator">+</span>u<span class="token punctuation">,</span>i<span class="token operator">+</span>s<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>e<span class="token operator">&lt;</span>r<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span>e<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">getPositions</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>e<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o<span class="token operator">=</span>e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token operator">=</span>e<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> u<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>u<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">===</span>i<span class="token operator">||</span><span class="token number">2</span><span class="token operator">===</span>i<span class="token operator">||</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">===</span>u<span class="token operator">||</span><span class="token number">2</span><span class="token operator">===</span>u<span class="token operator">||</span><span class="token number">0</span><span class="token operator">===</span>i<span class="token operator">&amp;&amp;</span><span class="token number">0</span><span class="token operator">===</span>u<span class="token operator">?</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token operator">+</span>i<span class="token punctuation">,</span>a<span class="token operator">+</span>u<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token operator">+</span>i<span class="token punctuation">,</span>a<span class="token operator">+</span>u<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ot</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">&gt;=</span><span class="token number">7</span><span class="token operator">&amp;&amp;</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>a<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">.</span><span class="token function">getEncodedBits</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span>e<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>u<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>u<span class="token operator">%</span><span class="token number">3</span><span class="token operator">+</span>a<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span>i<span class="token operator">&gt;&gt;</span>u<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token operator">=</span>t<span class="token punctuation">.</span>size<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>o<span class="token operator">=</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>u<span class="token operator">=</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>u<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">===</span>u<span class="token operator">&amp;&amp;</span>u<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isReserved</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>u<span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;&gt;</span>a<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>u<span class="token operator">-</span>s<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">===</span><span class="token operator">--</span>a<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token operator">+=</span>n<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>e<span class="token operator">&lt;=</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>o<span class="token operator">-=</span>n<span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token operator">-</span>n<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">getBestMask</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token function">ot</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">applyMask</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ot</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">modules</span><span class="token operator">:</span>c<span class="token punctuation">,</span><span class="token literal-property property">version</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">errorCorrectionLevel</span><span class="token operator">:</span>e<span class="token punctuation">,</span><span class="token literal-property property">maskPattern</span><span class="token operator">:</span>n<span class="token punctuation">,</span><span class="token literal-property property">segments</span><span class="token operator">:</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span>nt<span class="token punctuation">.</span>fromArray<span class="token punctuation">,</span>nt<span class="token punctuation">.</span>fromString<span class="token punctuation">,</span>nt<span class="token punctuation">.</span>rawSplit<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">ut</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>t<span class="token operator">||</span><span class="token string">""</span><span class="token operator">===</span>t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"No input text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>r<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>o<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>errorCorrectionLevel<span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token constant">E</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>maskPattern<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>toSJISFunc<span class="token operator">&amp;&amp;</span><span class="token function">u</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>toSJISFunc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">it</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token operator">==</span><span class="token keyword">typeof</span> t<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"string"</span><span class="token operator">!=</span><span class="token keyword">typeof</span> t<span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Color should be defined as hex string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">||</span><span class="token number">5</span><span class="token operator">===</span>r<span class="token punctuation">.</span>length<span class="token operator">||</span>r<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Invalid hex color: "</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token operator">!==</span>r<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span><span class="token number">4</span><span class="token operator">!==</span>r<span class="token punctuation">.</span>length<span class="token operator">||</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span>t<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token operator">===</span>r<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">,</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> e<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token literal-property property">r</span><span class="token operator">:</span>e<span class="token operator">&gt;&gt;</span><span class="token number">24</span><span class="token operator">&amp;</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token literal-property property">g</span><span class="token operator">:</span>e<span class="token operator">&gt;&gt;</span><span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span>e<span class="token operator">&gt;&gt;</span><span class="token number">8</span><span class="token operator">&amp;</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">255</span><span class="token operator">&amp;</span>e<span class="token punctuation">,</span><span class="token literal-property property">hex</span><span class="token operator">:</span><span class="token string">"#"</span><span class="token operator">+</span>r<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function-variable function">getOptions</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">||</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>color<span class="token operator">||</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>color<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> r<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>t<span class="token punctuation">.</span>margin<span class="token operator">||</span><span class="token keyword">null</span><span class="token operator">===</span>t<span class="token punctuation">.</span>margin<span class="token operator">||</span>t<span class="token punctuation">.</span>margin<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">4</span><span class="token operator">:</span>t<span class="token punctuation">.</span>margin<span class="token punctuation">,</span>n<span class="token operator">=</span>t<span class="token punctuation">.</span>width<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">.</span>width<span class="token operator">&gt;=</span><span class="token number">21</span><span class="token operator">?</span>t<span class="token punctuation">.</span>width<span class="token operator">:</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">,</span>o<span class="token operator">=</span>t<span class="token punctuation">.</span>scale<span class="token operator">||</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span>n<span class="token punctuation">,</span><span class="token literal-property property">scale</span><span class="token operator">:</span>n<span class="token operator">?</span><span class="token number">4</span><span class="token operator">:</span>o<span class="token punctuation">,</span><span class="token literal-property property">margin</span><span class="token operator">:</span>r<span class="token punctuation">,</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">dark</span><span class="token operator">:</span><span class="token function">e</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>color<span class="token punctuation">.</span>dark<span class="token operator">||</span><span class="token string">"#000000ff"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token literal-property property">light</span><span class="token operator">:</span><span class="token function">e</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>color<span class="token punctuation">.</span>light<span class="token operator">||</span><span class="token string">"#ffffffff"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span>t<span class="token punctuation">.</span>type<span class="token punctuation">,</span><span class="token literal-property property">rendererOpts</span><span class="token operator">:</span>t<span class="token punctuation">.</span>rendererOpts<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getScale</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>width<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">.</span>width<span class="token operator">&gt;=</span>t<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">.</span>margin<span class="token operator">?</span>r<span class="token punctuation">.</span>width<span class="token operator">/</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">.</span>margin<span class="token punctuation">)</span><span class="token operator">:</span>r<span class="token punctuation">.</span>scale<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">getImageWidth</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">getScale</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>e<span class="token punctuation">.</span>margin<span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">qrToImageData</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> o<span class="token operator">=</span>e<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>size<span class="token punctuation">,</span>a<span class="token operator">=</span>e<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>data<span class="token punctuation">,</span>i<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">getScale</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">.</span>margin<span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">=</span>n<span class="token punctuation">.</span>margin<span class="token operator">*</span>i<span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>color<span class="token punctuation">.</span>light<span class="token punctuation">,</span>n<span class="token punctuation">.</span>color<span class="token punctuation">.</span>dark<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>h<span class="token operator">&lt;</span>u<span class="token punctuation">;</span>h<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">&lt;</span>u<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> g<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span><span class="token punctuation">(</span>h<span class="token operator">*</span>u<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>d<span class="token operator">=</span>n<span class="token punctuation">.</span>color<span class="token punctuation">.</span>light<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">&gt;=</span>s<span class="token operator">&amp;&amp;</span>c<span class="token operator">&gt;=</span>s<span class="token operator">&amp;&amp;</span>h<span class="token operator">&lt;</span>u<span class="token operator">-</span>s<span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;</span>u<span class="token operator">-</span>s<span class="token punctuation">)</span>d<span class="token operator">=</span>f<span class="token punctuation">[</span>a<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token operator">*</span>o<span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>t<span class="token punctuation">[</span>g<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">.</span>r<span class="token punctuation">,</span>t<span class="token punctuation">[</span>g<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">.</span>g<span class="token punctuation">,</span>t<span class="token punctuation">[</span>g<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">.</span>b<span class="token punctuation">,</span>t<span class="token punctuation">[</span>g<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">.</span>getOptions<span class="token punctuation">,</span>st<span class="token punctuation">.</span>getScale<span class="token punctuation">,</span>st<span class="token punctuation">.</span>getImageWidth<span class="token punctuation">,</span>st<span class="token punctuation">.</span>qrToImageData<span class="token punctuation">;</span><span class="token keyword">var</span> ft<span class="token operator">=</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>r<span class="token punctuation">.</span><span class="token function-variable function">render</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span>e<span class="token punctuation">,</span>o<span class="token operator">=</span>r<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>n<span class="token operator">||</span>r<span class="token operator">&amp;&amp;</span>r<span class="token punctuation">.</span>getContext<span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token operator">=</span>r<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">||</span><span class="token punctuation">(</span><span class="token function-variable function">o</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"canvas"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"You need to specify a canvas element"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">getImageWidth</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>size<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span>i<span class="token punctuation">.</span><span class="token function">createImageData</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">qrToImageData</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>data<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>width<span class="token punctuation">,</span>r<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>style<span class="token operator">||</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>height<span class="token operator">=</span>e<span class="token punctuation">,</span>r<span class="token punctuation">.</span>width<span class="token operator">=</span>e<span class="token punctuation">,</span>r<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span>e<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span>e<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>o<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token punctuation">}</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span><span class="token function-variable function">renderToDataURL</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> o<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>o<span class="token operator">||</span>e<span class="token operator">&amp;&amp;</span>e<span class="token punctuation">.</span>getContext<span class="token operator">||</span><span class="token punctuation">(</span>o<span class="token operator">=</span>e<span class="token punctuation">,</span>e<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">||</span><span class="token punctuation">(</span>o<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span>o<span class="token punctuation">.</span>type<span class="token operator">||</span><span class="token string">"image/png"</span><span class="token punctuation">,</span>u<span class="token operator">=</span>o<span class="token punctuation">.</span>rendererOpts<span class="token operator">||</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>u<span class="token punctuation">.</span>quality<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ht</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> e<span class="token operator">=</span>t<span class="token punctuation">.</span>a<span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token operator">+</span><span class="token string">'="'</span><span class="token operator">+</span>t<span class="token punctuation">.</span>hex<span class="token operator">+</span><span class="token string">'"'</span><span class="token punctuation">;</span><span class="token keyword">return</span> e<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">?</span>n<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">'-opacity="'</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"'</span><span class="token operator">:</span>n<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ct</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span>t<span class="token operator">+</span>r<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">!==</span>e<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>n<span class="token operator">+=</span><span class="token string">" "</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token punctuation">}</span>ft<span class="token punctuation">.</span>render<span class="token punctuation">,</span>ft<span class="token punctuation">.</span>renderToDataURL<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">gt</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> n<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span>t<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>size<span class="token punctuation">,</span>a<span class="token operator">=</span>t<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>data<span class="token punctuation">,</span>i<span class="token operator">=</span>o<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">.</span>margin<span class="token punctuation">,</span>u<span class="token operator">=</span>n<span class="token punctuation">.</span>color<span class="token punctuation">.</span>light<span class="token punctuation">.</span>a<span class="token operator">?</span><span class="token string">"&lt;path "</span><span class="token operator">+</span><span class="token function">ht</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>color<span class="token punctuation">.</span>light<span class="token punctuation">,</span><span class="token string">"fill"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' d="M0 0h'</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"v"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'H0z"/&gt;'</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">"&lt;path "</span><span class="token operator">+</span><span class="token function">ht</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>color<span class="token punctuation">.</span>dark<span class="token punctuation">,</span><span class="token string">"stroke"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' d="'</span><span class="token operator">+</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> n<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>u<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>u<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> s<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>u<span class="token operator">%</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>u<span class="token operator">/</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">||</span>a<span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span>u<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token operator">+=</span>a<span class="token operator">?</span><span class="token function">ct</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">,</span>s<span class="token operator">+</span>e<span class="token punctuation">,</span><span class="token number">.5</span><span class="token operator">+</span>f<span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ct</span><span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">,</span>o<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>r<span class="token operator">&amp;&amp;</span>t<span class="token punctuation">[</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token operator">+=</span><span class="token function">ct</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span>o<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>o<span class="token punctuation">,</span>n<span class="token punctuation">.</span>margin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'"/&gt;'</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token string">'viewBox="0 0 '</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">'"'</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token string">'&lt;svg xmlns="http://www.w3.org/2000/svg" '</span><span class="token operator">+</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>width<span class="token operator">?</span><span class="token string">'width="'</span><span class="token operator">+</span>n<span class="token punctuation">.</span>width<span class="token operator">+</span><span class="token string">'" height="'</span><span class="token operator">+</span>n<span class="token punctuation">.</span>width<span class="token operator">+</span><span class="token string">'" '</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">+</span>f<span class="token operator">+</span><span class="token string">' shape-rendering="crispEdges"&gt;'</span><span class="token operator">+</span>u<span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"&lt;/svg&gt;\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> e<span class="token operator">&amp;&amp;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>h<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">dt</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>n<span class="token punctuation">,</span>o<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u<span class="token operator">=</span>i<span class="token punctuation">.</span>length<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token string">"function"</span><span class="token operator">==</span><span class="token keyword">typeof</span> i<span class="token punctuation">[</span>u<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Callback required as last argument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Too few arguments provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">===</span>u<span class="token operator">?</span><span class="token punctuation">(</span>n<span class="token operator">=</span>r<span class="token punctuation">,</span>r<span class="token operator">=</span>o<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">!==</span>u<span class="token operator">||</span>r<span class="token punctuation">.</span>getContext<span class="token operator">||</span><span class="token punctuation">(</span>o<span class="token operator">=</span>n<span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>a</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token function">ut</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token function">t</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">a</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Too few arguments provided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">===</span>u<span class="token operator">?</span><span class="token punctuation">(</span>a<span class="token operator">=</span>n<span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">,</span>r<span class="token operator">=</span>o<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">===</span>u<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>getContext<span class="token operator">&amp;&amp;</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token operator">===</span>a<span class="token operator">?</span><span class="token punctuation">(</span>a<span class="token operator">=</span>o<span class="token punctuation">,</span>o<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">=</span>o<span class="token punctuation">,</span>o<span class="token operator">=</span>n<span class="token punctuation">,</span>n<span class="token operator">=</span>r<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">var</span> f<span class="token operator">=</span><span class="token function">ut</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token function">t</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>r<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">a</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> lt<span class="token operator">=</span>ut<span class="token punctuation">,</span>vt<span class="token operator">=</span><span class="token function">dt</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>ft<span class="token punctuation">.</span>render<span class="token punctuation">)</span><span class="token punctuation">,</span>pt<span class="token operator">=</span><span class="token function">dt</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>ft<span class="token punctuation">.</span>renderToDataURL<span class="token punctuation">)</span><span class="token punctuation">,</span>wt<span class="token operator">=</span><span class="token function">dt</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gt</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mt<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">create</span><span class="token operator">:</span>lt<span class="token punctuation">,</span><span class="token literal-property property">toCanvas</span><span class="token operator">:</span>vt<span class="token punctuation">,</span><span class="token literal-property property">toDataURL</span><span class="token operator">:</span>pt<span class="token punctuation">,</span><span class="token literal-property property">toString</span><span class="token operator">:</span>wt<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>create<span class="token operator">=</span>lt<span class="token punctuation">,</span>t<span class="token punctuation">.</span>default<span class="token operator">=</span>mt<span class="token punctuation">,</span>t<span class="token punctuation">.</span>toCanvas<span class="token operator">=</span>vt<span class="token punctuation">,</span>t<span class="token punctuation">.</span>toDataURL<span class="token operator">=</span>pt<span class="token punctuation">,</span>t<span class="token punctuation">.</span>toString<span class="token operator">=</span>wt<span class="token punctuation">,</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token string">"__esModule"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  QRCode<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span>    <span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token literal-property property">errorCorrectionLevel</span><span class="token operator">:</span> <span class="token string">"H"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"QRCode"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工程化项目中使用"><a href="#工程化项目中使用" class="headerlink" title="工程化项目中使用"></a>工程化项目中使用</h3><p>安装</p><p><code>npm i qrcode</code></p><p>引入</p><pre class="line-numbers language-none"><code class="language-none">import QRCode from "qrcode"; //引入<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-none"><code class="language-none">qrcodeUrl= await QRCode.toDataURL(  "https://www.baidu.com");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tauri通过rust流式下载文件，并计算进度返回给前端</title>
      <link href="/2024/03/12/tauri-tong-guo-rust-liu-shi-xia-zai-wen-jian-bing-ji-suan-jin-du-fan-hui-gei-qian-duan/"/>
      <url>/2024/03/12/tauri-tong-guo-rust-liu-shi-xia-zai-wen-jian-bing-ji-suan-jin-du-fan-hui-gei-qian-duan/</url>
      
        <content type="html"><![CDATA[<h3 id="tauri通过rust流式下载文件，并计算进度返回给前端"><a href="#tauri通过rust流式下载文件，并计算进度返回给前端" class="headerlink" title="tauri通过rust流式下载文件，并计算进度返回给前端"></a>tauri通过rust流式下载文件，并计算进度返回给前端</h3><p>我通过Tauri前端中下载文件并展示进度事遇到了一些问题，通过a链接xhr下载总是有webview自带的下载提示，感觉很不友好，这里提供一个解决方案如下：</p><p>首先在main.rs 中定义一个全局变量（需要返回前端）</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">// 全局进度信息static mut GLOBAL_VARIABLE: String = String::new();// 下载文件的大小static mut GLOBAL_TOTAL: f64 = 0.0;// 是否下载中0否 1是static mut ISDOWN: u64 = 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再通过tauri返回给前端这个下载函数</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">//流式下载文件#[tauri::command]async fn download_file_q(url: String, path: String, puse: u64) -&gt; Result&lt;String, String&gt; {    unsafe {        println!("ISDOWN:{}", ISDOWN);        if ISDOWN &gt;= 1 {            return Err("Another file is currently downloading".into());        }        // ISDOWN = 1    }    let client = reqwest::Client::new();    let mut file: File = OpenOptions::new()        .read(true)        .write(true)        .create(true)        .open(&amp;path)        .map_err(|e| e.to_string())?;    let file_len: u64 = file.metadata().map(|m: fs::Metadata| m.len()).unwrap_or(0);    // 记录下总大小防止关闭软件后计算的总大小不对    let response_t = client.get(&amp;url).send().await.map_err(|e| e.to_string())?;    if response_t.status().is_success() {        let total_size_t = response_t.content_length().unwrap_or(0) as f64;        unsafe {            GLOBAL_TOTAL = response_t.content_length().unwrap_or(0) as f64;        }        let response: reqwest::Response = client            .get(&amp;url)            .header("Range", format!("bytes={}-", file_len))            .send()            .await            .map_err(|e: reqwest::Error| e.to_string())?;        if response.status().is_success() {            unsafe {                // 这个total_size不是一定准的 因为写入了range 会从上次下载的位置开始下载 所以用 total_size_t                // let total_size = response.content_length().unwrap_or(0) as f64;                let mut stream = response.bytes_stream();                file.seek(std::io::SeekFrom::End(0))                    .map_err(|e| e.to_string())?;                while let Some(chunk) = stream.next().await {                    let bytes = chunk.map_err(|e: reqwest::Error| e.to_string())?;                    file.write_all(&amp;bytes)                        .map_err(|e: io::Error| e.to_string())?;                    let file_len: u64 = file.metadata().map(|m: fs::Metadata| m.len()).unwrap_or(0);                    let progress: f64 = (file_len as f64 / total_size_t as f64) * 100.0;                    GLOBAL_VARIABLE = format!("{:.2}:{}:{}", progress, file_len, total_size_t);                    println!(                        "Download Progress: {:.2}% ({}/{} bytes)",                        progress, file_len, total_size_t                    );                    if puse &gt; 0 {                        // 暂停下载，让出执行权                        tokio::task::yield_now().await;                        break;                    } else {                    }                    // 下载完成                    if file_len as f64 &gt;= total_size_t {                        // 重置全局变量和状态                        ISDOWN = 0;                        GLOBAL_VARIABLE = String::new();                        println!("ISDOWN-suceess:{}", ISDOWN);                        // 重新打开文件，清除已下载的内容                        //    file_len_t = 0;                        println!("下载完成");                        // break;                    }                }            }        }        Ok("Download completed".into())    } else {        unsafe {            ISDOWN = 0;        }        Err("Download failed, response status is not success:1001".into())    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过一个函数获取下载进度信息</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">// 获取下载文件的信息#[tauri::command]fn glob() -&gt; String {    unsafe { format!("{}", GLOBAL_VARIABLE) }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> taurl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给tauri打包的exe可执行程序签名</title>
      <link href="/2024/03/04/gei-tauri-da-bao-de-exe-ke-zhi-xing-cheng-xu-qian-ming/"/>
      <url>/2024/03/04/gei-tauri-da-bao-de-exe-ke-zhi-xing-cheng-xu-qian-ming/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先你要有一个tauri打包的exe的可执行程序并安装相关环境 参考我上一篇文章<a href="https://anify.cn/2024/03/01/ru-he-shi-yong-tauri-jiang-web-xiang-mu-gou-jian-exe/">如何使用tauri将web项目构建exe</a></p><h3 id="配置环境变量添加到path中"><a href="#配置环境变量添加到path中" class="headerlink" title="配置环境变量添加到path中"></a>配置环境变量添加到path中</h3><p><code>C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64</code></p><p>注意我的是win10 具体路径请查看本机</p><h3 id="开始签名"><a href="#开始签名" class="headerlink" title="开始签名"></a>开始签名</h3><p>1、创建X.509证书</p><p><code>Makecert -sv xx_signature.pvk -r -n "CN=XX某某科技有限公司" xx_signature.cer</code></p><p>输入如下密码3次，可也可以自己生成密码<br>7W0d2S942DB0C82s</p><p>2、创建发行者证书</p><p><code>Cert2spc xx_signature.cer xx_signature.spc</code></p><p>3、导出pfx证书</p><p><code>pvk2pfx -pvk xx_signature.pvk -pi 7W0d2S942DB0C82s -spc xx_signature.spc -pfx xx_signature.pfx -f</code><br>4、软件签名</p><p><code>SignTool sign /fd sha256 /a /f xx_signature.pfx /p 7W0d2S942DB0C82s D:\qq\main\My.exe</code><br>键入时间缀</p><p><code>signtool timestamp /t http://timestamp.digicert.com D:\qq\main\My.exe</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用tauri将web项目构建exe</title>
      <link href="/2024/03/01/ru-he-shi-yong-tauri-jiang-web-xiang-mu-gou-jian-exe/"/>
      <url>/2024/03/01/ru-he-shi-yong-tauri-jiang-web-xiang-mu-gou-jian-exe/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>附上官网 <a href="https://tauri.app/zh-cn/v1/guides/getting-started/prerequisites">tauri官网</a></p><p>您需要安装 Microsoft C++ 生成工具。 最简单的方法是下载 <a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">Visual Studio 2022 生成工具</a>。 进行安装选择时，请勾选 “C++ 生成工具” 和 Windows 10 SDK。</p><p><img src="https://pic.imgdb.cn/item/65e524c79f345e8d03f2a872.jpg"></p><p>首先我们要安装rust</p><p><code>winget install --id Rustlang.Rustup</code></p><p>windowns可以执行以上命令然后按照提示继续</p><p>如果不能执行就手动安装 <a href="https://www.rust-lang.org/tools/install">前往下载</a>下载完毕直接执行 然后按照提示选择 1 就行 继续安装 可能会比较慢</p><p>更换下载源：Rustup 默认使用官方下载源。尝试切换到其他镜像源，可以通过设置环境变量 <code>RUSTUP_DIST_SERVER</code> 来指定新的下载源。例如，你可以尝试使用清华大学的 Rust 镜像源，设置命令为 <code>set RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup</code>，然后再次运行 Rustup 命令<code>rustup default stable</code>。</p><p>最后查看是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">rustc --versioncargo --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示出版本后代表就是成功了</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>这里我们直接使用脚手架创建项目</p><p><code>npm create tauri-app@latest</code></p><p>按照提示选择自己熟悉的web框架</p><p>然后cmd黑窗口进入你创建的项目里 执行<code>npm run  tauri dev</code> 运行您的项目</p><p><code>npm run  tauri build</code> 打包您的项目 打包后会生成一个target文件夹</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>防止别人打开控制台</title>
      <link href="/2024/01/04/fang-zhi-bie-ren-da-kai-kong-zhi-tai/"/>
      <url>/2024/01/04/fang-zhi-bie-ren-da-kai-kong-zhi-tai/</url>
      
        <content type="html"><![CDATA[<h3 id="防止别人打开控制台的代码"><a href="#防止别人打开控制台的代码" class="headerlink" title="防止别人打开控制台的代码"></a>防止别人打开控制台的代码</h3><p>贴到html中即可🙄</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token punctuation">,</span> timeLimit <span class="token operator">=</span> <span class="token number">50</span>              <span class="token punctuation">,</span> open <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token function">setInterval</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token function-variable function">addListener</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function-variable function">cancleListenr</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    callbacks <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> v <span class="token operator">!==</span> fn<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">debugger</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime <span class="token operator">&gt;</span> timeLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>open<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    open <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    window<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'你真坏，请关闭控制台！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    open <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PM2常用命令</title>
      <link href="/2024/01/02/pm2-chang-yong-ming-ling/"/>
      <url>/2024/01/02/pm2-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="PM2常用命令"><a href="#PM2常用命令" class="headerlink" title="PM2常用命令"></a>PM2常用命令</h3><ol><li>启动应用程序：</li></ol><p><code> pm2 start app.js</code></p><p>这将启动名为 <code>app</code>的应用程序，并将其作为一个后台进程运行。</p><ol start="2"><li><p>列出所有应用程序：</p><p><code>pm2 list</code></p></li></ol><p>这将列出所有正在运行的应用程序，包括它们的ID、名称、状态和启动时间等信息。</p><ol start="3"><li><p>停止应用程序：</p><p><code>pm2 stop app</code></p></li></ol><p>这将停止名为 <code>app</code>的应用程序。</p><ol start="4"><li><p>重启应用程序：</p><p><code>pm2 restart app</code></p></li></ol><p>这将重启名为 <code>app</code>的应用程序。</p><ol start="5"><li><p>删除应用程序：</p><p><code>pm2 delete app</code></p></li></ol><p>这将停止并删除名为 <code>app</code>的应用程序。</p><ol start="6"><li><p>监视应用程序日志：</p><p><code>pm2 logs app</code></p></li></ol><p>这将显示名为 <code>app</code>的应用程序的日志输出。</p><ol start="7"><li><p>监视所有应用程序日志：</p><p><code>pm2 logs</code></p></li></ol><p>这将显示所有正在运行的应用程序的日志输出。</p><ol start="8"><li><p>监视应用程序的CPU和内存使用情况：</p><p><code>pm2 monit app</code></p></li></ol><p>这将显示名为 <code>app</code>的应用程序的CPU和内存使用情况。</p><ol start="9"><li><p>使用PM2启动应用程序，并将日志输出到文件夹中</p><p><code>pm2 start app.js --name myapp --log logs/myapp.log</code></p></li></ol><p>这将启动名为<code>myapp</code>的应用程序，并将日志输出到<code>logs/myapp.log</code>文件中。请确保将<code>app.js</code>替换为你的应用程序的入口文件</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> PM2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新域名</title>
      <link href="/2023/12/29/xin-yu-ming/"/>
      <url>/2023/12/29/xin-yu-ming/</url>
      
        <content type="html"><![CDATA[<p>新域名</p><p>老域名为：<a href="http://blog.wuwang.love/">小杨日记</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用electron将web打包成exe桌面程序</title>
      <link href="/2023/12/26/ru-he-shi-yong-electron-jiang-web-da-bao-cheng-exe-zhuo-mian-cheng-xu/"/>
      <url>/2023/12/26/ru-he-shi-yong-electron-jiang-web-da-bao-cheng-exe-zhuo-mian-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="如何使用-electron-将-web-打包成-exe-桌面程序"><a href="#如何使用-electron-将-web-打包成-exe-桌面程序" class="headerlink" title="如何使用 electron 将 web 打包成 exe 桌面程序"></a>如何使用 electron 将 web 打包成 exe 桌面程序</h3><p>首先安装依赖 使用 <code>npm</code>或者 <code>yarn</code>安装</p><p><code>npm i electron@28.1.0 -D</code></p><p><code>npm i electron-packager@17.1.2 -D</code></p><p>例如 <code>index.html</code>文件如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello Worl00d!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    We are usin000g io.js .  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主文件夹创建一个 <code>index.js</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> BrowserWindow <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">;</span> <span class="token comment">// 创建原生浏览器窗口的模块</span><span class="token comment">// 保持一个对于 window 对象的全局引用，不然，当 JavaScript 被 GC，</span><span class="token comment">// window 会被自动地关闭</span><span class="token keyword">var</span> mainWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 当所有窗口被关闭了，退出。</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"window-all-closed"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 在 OS X 上，通常用户在明确地按下 Cmd + Q 之前</span>  <span class="token comment">// 应用会保持活动状态</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!=</span> <span class="token string">"darwin"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当 Electron 完成了初始化并且准备创建浏览器窗口的时候</span><span class="token comment">// 这个方法就被调用</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"ready"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 创建浏览器窗口。</span>  mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加载应用的 index.html</span>  mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">"file://"</span> <span class="token operator">+</span> __dirname <span class="token operator">+</span> <span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打开开发工具</span>  mainWindow<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当 window 被关闭，这个事件会被触发</span>  mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span>    <span class="token comment">// 通常会把多个 window 对象存放在一个数组里面，</span>    <span class="token comment">// 但这次不是。</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把下面脚本命令替换到你的 <code>package.json</code>里面</p><p><code>npm run serve</code> 运行调试</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"scripts": {    "serve": "electron .",    "build": "electron-packager ./ app --platform=win32 --arch=x64 --out=dist/"  },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>npm run build</code> 进行打包</p><p>electron-packager ./ app –platform=win32 –arch=x64 –out=dist/</p><p><code>./</code>是需要执行的 electron 代码文件的目录 这里直接同级即可</p><p><code>app</code>是打包后 exe 程序的名字</p><p><code>--platform=win32 --arch=x64</code>是打包的系统详情请 <a href="https://www.npmjs.com/package/electron-packager">查看官网</a></p><p><code>--out=dist</code> dist 是打包后的文件夹名称</p><blockquote><p>注意 这里仅是最基础的演示阶段 如果需要更完整的生态以及开发流程 请查看官网 <a href="https://www.electronjs.org/zh/docs/latest/">官网</a></p></blockquote><p><strong>如果想要查看如何打包为一个 exe 可执行文件 请看我上篇文章<a href="/2023/12/25/electron-da-bao-wei-exe-ke-zhi-xing-wen-jian/"># electron 打包为 exe 可执行文件</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron打包为exe可执行文件</title>
      <link href="/2023/12/25/electron-da-bao-wei-exe-ke-zhi-xing-wen-jian/"/>
      <url>/2023/12/25/electron-da-bao-wei-exe-ke-zhi-xing-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="electron-打包为-exe-可执行文件"><a href="#electron-打包为-exe-可执行文件" class="headerlink" title="electron 打包为 exe 可执行文件"></a>electron 打包为 exe 可执行文件</h3><p>我们都知道使用 electron 时打包后会形成一个目录，目录中有很多文件</p><p>例如：</p><p><img src="https://s11.ax1x.com/2023/12/25/piH57b6.md.png" alt="原来的">、</p><p>这样我们做完后就很不方便分享给别人，那如何把 <code>electron</code>打包后的代码打包为一个.exe 可执行文件呢？😵</p><p>这里我们采用 Inno Setup 把文件打包为一个可执行文件</p><p>首先在官网下载最新版本 <a href="https://jrsoftware.org/isdl.php">Inno Setup</a></p><p>或者点击 <a href="https://jrsoftware.org/download.php/is.exe">这里 </a>直接下载 🐷</p><p>然后下载对应系统版本</p><p>安装完成后新建项目然后删除代码替换如下</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">[Setup];生成的.exe名字#define AppName "测试测试";你需要执行的exe的名字#define buildAppName "app";这是app的名字AppName=AppNameAppVersion=1.1;每次安装打开目录DisableDirPage=no;输出的默认名字  默认安装目录（C:\Program Files (x86)\testapp）OutputBaseFilename=testapp2;打包到的文件夹目录OutputDir=D:\test-electronDefaultDirName={commonpf}\testapp999;打包的exe图标目录SetupIconFile=D:\test-electron\test.ico[Files];需要添加的文件Source: "D:\test-electron\app-win32-x64\*"; DestDir: "{app}"; Flags: recursesubdirs;自动生成桌面快捷方式[Icons]Name: "{commondesktop}\{#AppName}"; Filename: "{app}\{#buildAppName}.exe"Name: "{commonstartmenu}\Programs\{#AppName}"; Filename: "{app}\{#buildAppName}.exe";安装完自动打开[Run]Filename: "{app}\{#buildAppName}.exe"; Flags: postinstall nowait[Code]var  CustomInstallPath: string;function GetCustomInstallPath(DefaultPath: string): string;begin  if CustomInstallPath &lt;&gt; '' then    Result := CustomInstallPath  else    Result := DefaultPath;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击菜单栏的 <strong>Build</strong> 然后点击 Compiler 等待打包成功即可了！🤗</p><p><img src="https://s11.ax1x.com/2023/12/26/pibiJAO.png" alt="示例图"></p><p><img src="https://s11.ax1x.com/2023/12/25/piH5v2d.png" alt="piH5v2d.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pnpm（npm）安装electron失败解决办法</title>
      <link href="/2023/12/25/pnpm-an-zhuang-electron-shi-bai-jie-jue-ban-fa/"/>
      <url>/2023/12/25/pnpm-an-zhuang-electron-shi-bai-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="pnpm（npm）安装-electron-失败解决办法"><a href="#pnpm（npm）安装-electron-失败解决办法" class="headerlink" title="pnpm（npm）安装 electron 失败解决办法"></a>pnpm（npm）安装 electron 失败解决办法</h3><p>安装<code>electron</code>老是报网络错误，提供一个方法亲测可用</p><p><code>pnpm config set electron_mirror "https://npm.taobao.org/mirrors/electron/"</code></p><p><code>npm config set electron_mirror "https://npm.taobao.org/mirrors/electron/"</code></p><p>然后</p><p><code>pnpm i electron -D</code></p><p>或</p><p><code>npm i electron -D</code></p><p>执行的时候在脚本中添加自定义命令 <code>electron .</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uglifyjs 合并压缩 js</title>
      <link href="/2023/12/18/uglifyjs-he-bing-ya-suo-js/"/>
      <url>/2023/12/18/uglifyjs-he-bing-ya-suo-js/</url>
      
        <content type="html"><![CDATA[<h3 id="1、全局安装-uglify-js"><a href="#1、全局安装-uglify-js" class="headerlink" title="1、全局安装 uglify-js"></a>1、全局安装 uglify-js</h3><p><code>npm install -g uglify-js</code></p><h6 id="也可以局部安装"><a href="#也可以局部安装" class="headerlink" title="也可以局部安装"></a>也可以局部安装</h6><p><code>npm install --save-dev uglify-js</code></p><h3 id="2、在终端执行合并压缩命令"><a href="#2、在终端执行合并压缩命令" class="headerlink" title="2、在终端执行合并压缩命令"></a>2、在终端执行合并压缩命令</h3><p><code>uglifyjs js/common.js js/example.js -o js/common.min.js</code></p><p>上面的命令表示把 common.js 和 example.js 合并成为 common.min.js。</p><p>这里面的路径请根据你项目的实际情况更改</p><h4 id="一些常用的参数列表"><a href="#一些常用的参数列表" class="headerlink" title="一些常用的参数列表"></a>一些常用的参数列表</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">-o,--output      指定输出文件，默认情况下为命令行-b,--beautify    美化代码格式的参数-m,--mangle      改变变量名称（ex：在一些例如YUI Compressor压缩完的代码后你可以看到a,b,c,d,e,f之类的变量，加了-m参数，uglifyjs也可以做到，默认情况下，是不会改变变量名称的）-r,--reserved    保留的变量名称，不需要被-m参数改变变量名的-c,--compress    OK，主角登场了，这是让uglifyjs进行代码压缩的参数。可以在-c后边添加一些具体的参数来控制压缩的特性，下文中会具体介绍。--comments       用来控制注释的代码的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接 <a href="%5Bhttps://%5D(https://github.com/mishoo/UglifyJS)">UglifyJS</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clean-css 合并压缩css</title>
      <link href="/2023/12/13/ru-he-ming-ling-xing-ya-suo-css/"/>
      <url>/2023/12/13/ru-he-ming-ling-xing-ya-suo-css/</url>
      
        <content type="html"><![CDATA[<h3 id="1、全局安装-clean-css"><a href="#1、全局安装-clean-css" class="headerlink" title="1、全局安装 clean-css"></a>1、全局安装 clean-css</h3><p><code>npm install -g clean-css</code></p><h6 id="也可以局部安装"><a href="#也可以局部安装" class="headerlink" title="也可以局部安装"></a>也可以局部安装</h6><p><code>npm install --save-dev clean-css</code></p><h4 id="2、安装-clean-css-cli"><a href="#2、安装-clean-css-cli" class="headerlink" title="2、安装 clean-css-cli"></a>2、安装 clean-css-cli</h4><p><code>npm install -g clean-css-cli</code></p><h3 id="3、在终端执行合并压缩命令"><a href="#3、在终端执行合并压缩命令" class="headerlink" title="3、在终端执行合并压缩命令"></a>3、在终端执行合并压缩命令</h3><p><code>cleancss -o css/app.all.min.css css/common.css css/index.css</code></p><p>css/app.all.min.css — 表示你压缩后的目标路径及 css 文件名</p><p>css/common.css css/index.css — 这些都是你需要压缩合并的 css</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听网页页面元素是否在窗口可视</title>
      <link href="/2023/11/28/jian-ting-ye-mian-yuan-su-shi-fou-ke-shi/"/>
      <url>/2023/11/28/jian-ting-ye-mian-yuan-su-shi-fou-ke-shi/</url>
      
        <content type="html"><![CDATA[<p>就是理由新增的 api <code>IntersectionObserver</code>可以引入下方链接适配兼容</p><p><a href="https://cdn.jsdelivr.net/npm/intersection-observer-polyfill@0.1.0/dist/IntersectionObserver.min.js">https://cdn.jsdelivr.net/npm/intersection-observer-polyfill@0.1.0/dist/IntersectionObserver.min.js</a></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// elementArray：是需要监听的页面dom元素组，建议使用一个div包裹住需要监听的dom元素</span><span class="token comment">// callback: 是回调函数</span><span class="token keyword">const</span> <span class="token function-variable function">monitorVisualArea</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">elementArray<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建JS交叉观察函数</span>    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutaions</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> interArr <span class="token operator">=</span> mutaions<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建IntersectionObserver对象</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>interArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 传入参数并调用回调函数</span>        <span class="token function">callback</span><span class="token punctuation">(</span>interArr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elementArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 需要监听的元素</span>      observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>elementArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> img1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#img1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">monitorVisualArea</span><span class="token punctuation">(</span><span class="token punctuation">[</span>img1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在静态页面构建并使用tailwindcss</title>
      <link href="/2023/11/24/ru-he-zai-jing-tai-ye-mian-gou-jian-bing-shi-yong-tailwindcss/"/>
      <url>/2023/11/24/ru-he-zai-jing-tai-ye-mian-gou-jian-bing-shi-yong-tailwindcss/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-Tailwind-CSS"><a href="#安装-Tailwind-CSS" class="headerlink" title="安装 Tailwind CSS"></a>安装 Tailwind CSS</h3><p><code>npm install -D tailwindcss</code></p><p><code>npx tailwindcss init</code></p><h3 id="配置模板文件的路径"><a href="#配置模板文件的路径" class="headerlink" title="配置模板文件的路径"></a>配置模板文件的路径</h3><p>执行完上述操作会在根目录生成一个配置文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** @type {import('tailwindcss').Config} */</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.{html,js}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将加载-Tailwind-的指令添加到你的-CSS-文件中"><a href="#将加载-Tailwind-的指令添加到你的-CSS-文件中" class="headerlink" title="将加载 Tailwind 的指令添加到你的 CSS 文件中"></a>将加载 Tailwind 的指令添加到你的 CSS 文件中</h3><p><strong><em>./src/input.css</em></strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="开启-Tailwind-CLI-构建流程"><a href="#开启-Tailwind-CLI-构建流程" class="headerlink" title="开启 Tailwind CLI 构建流程"></a>开启 Tailwind CLI 构建流程</h3><p>运行命令行（CLI）工具扫描模板文件中的所有出现的 CSS 类（class）并编译 CSS 代码。</p><p><code>npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch</code></p><h3 id="在你的-HTML-代码中使用-Tailwind-吧-🤗"><a href="#在你的-HTML-代码中使用-Tailwind-吧-🤗" class="headerlink" title="在你的 HTML 代码中使用 Tailwind 吧 🤗"></a>在你的 HTML 代码中使用 Tailwind 吧 🤗</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/dist/output.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-3xl font-bold underline<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意你的文件都要在配置的 <code> content:["./src/**/*.{html,js}"],</code>比如这里都要在 src 目录下，可以根据需求来调整 😋</p><link href="/dist/output.css" rel="stylesheet">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hrml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue+Ts自定义封装日期组件</title>
      <link href="/2023/11/23/vue-ts-zi-ding-yi-feng-zhuang-ri-qi-zu-jian/"/>
      <url>/2023/11/23/vue-ts-zi-ding-yi-feng-zhuang-ri-qi-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>至于为啥不用组件库的日期组件而费劲的自己去封装一个勒？说多了都是泪，由于公司 UI 和常用的组件库的样式和一些操作交互有些差别，试了一通发现都不能实现业务需求，干脆手撸一个吧！</p><p>先来看看实现效果吧</p><p><a href="https://imgse.com/i/pidTYWV"><img src="https://z1.ax1x.com/2023/11/23/pidTYWV.png" alt="pidTYWV.png"></a></p><p><a href="https://imgse.com/i/pidTtzT"><img src="https://z1.ax1x.com/2023/11/23/pidTtzT.png" alt="pidTtzT.png"></a></p><p><a href="https://imgse.com/i/pidTsF1"><img src="https://z1.ax1x.com/2023/11/23/pidTsF1.png" alt="pidTsF1.png"></a></p><p>话不多说直接上代码！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"date-picker relative"</span> ref<span class="token operator">=</span><span class="token string">"date_picker"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"input-date w-36 h-8 rounded overflow-hidden relative"</span>      <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"{ backgroundColor: '#2B2D3A' }"</span>    <span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"text"</span>        <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"border-none outline-none w-full h-full px-3"</span>        <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"{ backgroundColor: '#2B2D3A' }"</span>        placeholder<span class="token operator">=</span><span class="token string">"请选择日期"</span>        @blur<span class="token operator">=</span><span class="token string">"BlurHandel"</span>        @focus<span class="token operator">=</span><span class="token string">"FocusHandel"</span>        v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span>      <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>i        <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"iconfont cursor-pointer text-white absolute right-2 top-1/2 -translate-y-1/2"</span>        <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"icon"</span>        @mouseenter<span class="token operator">=</span><span class="token string">"iconMouenterHandel"</span>        @mouseleave<span class="token operator">=</span><span class="token string">"icon = 'icon-rili'"</span>        @click<span class="token operator">=</span><span class="token string">"iconClickHandel"</span>      <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"calendar"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"calendar-card"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isFoucus"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"flex w-full h-9 justify-between items-center"</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"{ color: '#000' }"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 上一年 <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isPreYear"</span> @click<span class="token operator">=</span><span class="token string">"minusYear(true)"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"iconfont icon-zuojiantou"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 上一月 <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"minusMonth"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isPreMonth"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"_button"</span> @mouseover<span class="token operator">=</span><span class="token string">"isYearShow = true"</span> @mouseout<span class="token operator">=</span><span class="token string">"isYearShow = false"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date<span class="token punctuation">.</span>year <span class="token punctuation">}</span><span class="token punctuation">}</span>年<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box_year"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isYearShow"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>li                <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{ active: date.year === year }"</span>                v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(year, index) in yearList"</span>                <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"year"</span>                @click<span class="token operator">=</span><span class="token string">"clickCurrentYearHandel(year, index)"</span>                <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> year <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li              <span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date<span class="token punctuation">.</span>date <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"_button"</span> @mouseover<span class="token operator">=</span><span class="token string">"isMouthShow = true"</span> @mouseout<span class="token operator">=</span><span class="token string">"isMouthShow = false"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>月<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box_month"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isMouthShow"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>li                <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{ active: (date.month as number) + 1 === m }"</span>                v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(m, index) in monthList"</span>                <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"m"</span>                @click<span class="token operator">=</span><span class="token string">"clickCurrentMonthHandel(m, index)"</span>                <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> m <span class="token punctuation">}</span><span class="token punctuation">}</span>月<span class="token operator">&lt;</span><span class="token operator">/</span>li              <span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 下一月 <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"plusMonth"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isNextMonth"</span><span class="token operator">&gt;&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 下一年 <span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"plusYear(true)"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isNextYear"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"iconfont icon-youjiantou"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"calendar-content"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ul-week"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"li-week"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in week"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ul-day"</span><span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li            <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"li-day"</span>            v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in days"</span>            <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"index"</span>            <span class="token operator">:</span>isThisMonth<span class="token operator">=</span><span class="token string">"item?.isThisMonth"</span>            @click<span class="token operator">=</span><span class="token string">"handleClick(item)"</span>          <span class="token operator">&gt;</span>            <span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token operator">?.</span>date <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li @click<span class="token operator">=</span><span class="token string">"clearAllHandel"</span><span class="token operator">&gt;</span>清空<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li @click<span class="token operator">=</span><span class="token string">"currentTodayHandel"</span><span class="token operator">&gt;</span>今天<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>          <span class="token operator">&lt;</span>li @click<span class="token operator">=</span><span class="token string">"okHandel"</span><span class="token operator">&gt;</span>确定<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> unref<span class="token punctuation">,</span> watch<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUnmounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> Idate<span class="token punctuation">,</span> IDateDate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../props'</span><span class="token punctuation">;</span>  <span class="token function">defineOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'DatePicker'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">/*是否显示上一月箭头 */</span>    <span class="token literal-property property">isPreMonth</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/*是否显示下一月箭头 */</span>    <span class="token literal-property property">isNextMonth</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/*是否显示上一年箭头 */</span>    <span class="token literal-property property">isPreYear</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/*是否显示下一年箭头 */</span>    <span class="token literal-property property">isNextYear</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>boolean<span class="token operator">&gt;</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token string">'ok'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isYearShow <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isMouthShow <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isActiveLi <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isActiveLiM <span class="token operator">=</span> ref<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isFoucus <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> calendar <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> date_picker <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> icon <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'icon-rili'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> monthList <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token literal-property property">date</span><span class="token operator">:</span> Idate <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token literal-property property">current</span><span class="token operator">:</span> Idate <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">year</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">month</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token literal-property property">h</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token literal-property property">s</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> yearList <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span>d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> number<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'日'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'二'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">,</span> <span class="token string">'五'</span><span class="token punctuation">,</span> <span class="token string">'六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> days <span class="token operator">=</span> ref<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>Idate<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">bodyClickHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> MouseEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>date_picker<span class="token punctuation">.</span>value <span class="token keyword">as</span> unknown <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isFoucus<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关闭'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">initDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> bodyClickHandel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> bodyClickHandel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 初始化日期（年月日）   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">initDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>year<span class="token punctuation">,</span> current<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 初始化时间（时分秒）   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">initTime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>h <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>m <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>s <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>h <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>m <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>s <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 格式话时间   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">getCurrentTime</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">hours<span class="token punctuation">,</span> minutes<span class="token punctuation">,</span> seconds</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> strDate <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hours <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>minutes <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token literal-property property">hours</span><span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token literal-property property">minutes</span><span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> <span class="token literal-property property">seconds</span><span class="token operator">:</span> number <span class="token operator">|</span> string <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hours <span class="token operator">=</span> hours <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> hours <span class="token operator">:</span> hours<span class="token punctuation">;</span>      minutes <span class="token operator">=</span> minutes <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> minutes <span class="token operator">:</span> minutes<span class="token punctuation">;</span>      seconds <span class="token operator">=</span> seconds <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> seconds <span class="token operator">:</span> seconds<span class="token punctuation">;</span>      strDate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hours<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>minutes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>seconds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hours <span class="token operator">&amp;&amp;</span> minutes <span class="token operator">&amp;&amp;</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>      hours <span class="token operator">=</span> hours <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> hours <span class="token operator">:</span> hours<span class="token punctuation">;</span>      minutes <span class="token operator">=</span> minutes <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> minutes <span class="token operator">:</span> minutes<span class="token punctuation">;</span>      seconds <span class="token operator">=</span> seconds <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> seconds <span class="token operator">:</span> seconds<span class="token punctuation">;</span>      strDate <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hours<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>minutes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>seconds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> strDate<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 校验日期格式   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">checkDateFormat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">dateString</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 需要返回的日期数据   */</span>  <span class="token keyword">const</span> selectDate <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">$d</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token punctuation">.</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>          current<span class="token punctuation">.</span>month<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span>            <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>          current<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> current<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> current<span class="token punctuation">.</span>date        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>h<span class="token punctuation">,</span> current<span class="token punctuation">.</span>m<span class="token punctuation">,</span> current<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      $<span class="token constant">Y</span><span class="token operator">:</span> current<span class="token punctuation">.</span>year<span class="token punctuation">,</span>      $<span class="token constant">M</span><span class="token operator">:</span> current<span class="token punctuation">.</span>month<span class="token punctuation">,</span>      $<span class="token constant">D</span><span class="token operator">:</span> current<span class="token punctuation">.</span>date<span class="token punctuation">,</span>      $<span class="token constant">H</span><span class="token operator">:</span> current<span class="token punctuation">.</span>h<span class="token punctuation">,</span>      <span class="token literal-property property">$m</span><span class="token operator">:</span> current<span class="token punctuation">.</span>m<span class="token punctuation">,</span>      <span class="token literal-property property">$s</span><span class="token operator">:</span> current<span class="token punctuation">.</span>s<span class="token punctuation">,</span>      <span class="token literal-property property">$date</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token punctuation">.</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>        current<span class="token punctuation">.</span>month<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span>          <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">:</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> current<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> current<span class="token punctuation">.</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">$time</span><span class="token operator">:</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>h<span class="token punctuation">,</span> current<span class="token punctuation">.</span>m<span class="token punctuation">,</span> current<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token keyword">as</span> IDateDate<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">watch</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> selectDate<span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 监听输入变化 更新日期并重新渲染   */</span>  <span class="token function">watch</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">v</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkDateFormat</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span>value <span class="token operator">=</span> v<span class="token punctuation">;</span>      <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      current<span class="token punctuation">.</span>year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      current<span class="token punctuation">.</span>month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      current<span class="token punctuation">.</span>date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      date<span class="token punctuation">.</span>year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      date<span class="token punctuation">.</span>month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      date<span class="token punctuation">.</span>date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">createCalendar</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>year<span class="token punctuation">,</span> current<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 有值 hover时显示清楚按钮   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">iconMouenterHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      icon<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'icon-chacha'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 点击清楚   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">iconClickHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    value<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token function">clearAllHandel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 失去焦点   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">BlurHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkDateFormat</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">unref</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        value<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 获取焦点   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">FocusHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    isFoucus<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>value <span class="token keyword">as</span> unknown <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>animation <span class="token operator">=</span> <span class="token string">'fade .3s forwards'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 点击日历 天   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">item</span><span class="token operator">:</span> Idate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    current<span class="token punctuation">.</span>year <span class="token operator">=</span> item<span class="token punctuation">.</span>year<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>month <span class="token operator">=</span> item<span class="token punctuation">.</span>month<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>date <span class="token operator">=</span> item<span class="token punctuation">.</span>date<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token string">'23'</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>year<span class="token punctuation">,</span> item<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 选择年   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">clickCurrentYearHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cur</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    isActiveLi<span class="token punctuation">.</span>value <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">(</span>date<span class="token punctuation">.</span>year <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 选择月   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">clickCurrentMonthHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cur</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    isActiveLiM<span class="token punctuation">.</span>value <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">(</span>date<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span> <span class="token operator">=</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 清空   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">clearAllHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    current<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    current<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>year<span class="token punctuation">,</span> current<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">okHandel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 关闭   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>value <span class="token keyword">as</span> unknown <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>animation <span class="token operator">=</span> <span class="token string">'fade_up .4s forwards'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      isFoucus<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 点击今天   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">currentTodayHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">initDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">okHandel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 点击确认   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">okHandel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">,</span> selectDate<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    value<span class="token punctuation">.</span>value <span class="token operator">=</span> selectDate<span class="token punctuation">.</span>value<span class="token operator">?.</span>$date<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 下一月   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">plusMonth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 月数到12 加一年</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span>month <span class="token operator">===</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      date<span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">plusYear</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>date<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 上一月   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">minusMonth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 月数到0 减一年</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span>month <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      date<span class="token punctuation">.</span>month <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>      <span class="token function">minusYear</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>date<span class="token punctuation">.</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">createCalendar</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 下一年   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">plusYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">create</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span>year <span class="token operator">===</span> <span class="token number">2099</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      date<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">1970</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>date<span class="token punctuation">.</span>year <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>create<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createCalendar</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 上一年   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">minusYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">create</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>date<span class="token punctuation">.</span>year <span class="token operator">==</span> <span class="token number">1970</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      date<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2099</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>date<span class="token punctuation">.</span>year <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>create<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createCalendar</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 创建日历表   */</span>  <span class="token keyword">const</span> <span class="token function-variable function">createCalendar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">year</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">,</span> <span class="token literal-property property">month</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span>year <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dayOfFirstDay <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    days<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      d<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      d<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span>month <span class="token keyword">as</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>      d<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>i <span class="token operator">-</span> dayOfFirstDay <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> isThisMonth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isThisMonth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        isThisMonth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        current<span class="token punctuation">.</span>date <span class="token operator">==</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        current<span class="token punctuation">.</span>month <span class="token operator">==</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        current<span class="token punctuation">.</span>year <span class="token operator">==</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        isThisMonth <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token literal-property property">date</span><span class="token operator">:</span> Idate <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token literal-property property">year</span><span class="token operator">:</span> year<span class="token punctuation">,</span>          <span class="token literal-property property">month</span><span class="token operator">:</span> month<span class="token punctuation">,</span>          <span class="token literal-property property">date</span><span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">isThisMonth</span><span class="token operator">:</span> isThisMonth<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        days<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token literal-property property">year</span><span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">month</span><span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">date</span><span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token literal-property property">isThisMonth</span><span class="token operator">:</span> isThisMonth<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        days<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>  <span class="token comment">/* stylelint-disable-next-line keyframes-name-pattern */</span>  @keyframes fade_up <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token operator">%</span> <span class="token punctuation">{</span>      <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">{</span>      <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  @keyframes fade <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token operator">%</span> <span class="token punctuation">{</span>      <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">{</span>      <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style scoped lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">&gt;</span>  <span class="token punctuation">.</span>calendar<span class="token operator">-</span>card <span class="token punctuation">{</span>    @keyframes fade <span class="token punctuation">{</span>      <span class="token number">0</span><span class="token operator">%</span> <span class="token punctuation">{</span>        <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">{</span>        <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>    z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">999</span><span class="token punctuation">;</span>    <span class="token literal-property property">top</span><span class="token operator">:</span> 40px<span class="token punctuation">;</span>    <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> 310px<span class="token punctuation">;</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> 293px<span class="token punctuation">;</span>    <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 10px<span class="token punctuation">;</span>    <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token literal-property property">animation</span><span class="token operator">:</span> fade <span class="token number">0</span><span class="token punctuation">.</span>5s forwards<span class="token punctuation">;</span>    <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid #ebeef5<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 10px<span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>    <span class="token punctuation">.</span>_button <span class="token punctuation">{</span>      <span class="token literal-property property">position</span><span class="token operator">:</span> relative<span class="token punctuation">;</span>      <span class="token literal-property property">padding</span><span class="token operator">:</span> 5px 8px<span class="token punctuation">;</span>      border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>      <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>      <span class="token operator">&amp;</span><span class="token operator">:</span>hover <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> #e7ebf5<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">.</span>box_year<span class="token punctuation">,</span>      <span class="token punctuation">.</span>box_month <span class="token punctuation">{</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>        z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> 18px<span class="token punctuation">;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> 114px<span class="token punctuation">;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> 159px<span class="token punctuation">;</span>        padding<span class="token operator">-</span>top<span class="token operator">:</span> 10px<span class="token punctuation">;</span>        <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token literal-property property">animation</span><span class="token operator">:</span> fade <span class="token number">0</span><span class="token punctuation">.</span>3s forwards<span class="token punctuation">;</span>        ul <span class="token punctuation">{</span>          <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>          flex<span class="token operator">-</span>wrap<span class="token operator">:</span> wrap<span class="token punctuation">;</span>          <span class="token literal-property property">height</span><span class="token operator">:</span> 156px<span class="token punctuation">;</span>          <span class="token literal-property property">padding</span><span class="token operator">:</span> 16px<span class="token punctuation">;</span>          <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid #d3d3dd<span class="token punctuation">;</span>          border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>          background<span class="token operator">-</span>color<span class="token operator">:</span> #fff<span class="token punctuation">;</span>          box<span class="token operator">-</span>shadow<span class="token operator">:</span> <span class="token number">0</span> 3px 7px <span class="token number">0</span> #ddd8d8<span class="token punctuation">;</span>          li <span class="token punctuation">{</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 36px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 22px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>right<span class="token operator">:</span> 5px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>bottom<span class="token operator">:</span> 4px<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">000</span><span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 22px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token operator">:</span>hover <span class="token punctuation">{</span>              border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>              background<span class="token operator">-</span>color<span class="token operator">:</span> #e7ebf5<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">&amp;</span><span class="token punctuation">.</span>active <span class="token punctuation">{</span>              border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>              background<span class="token operator">-</span>color<span class="token operator">:</span> #1c67e5<span class="token punctuation">;</span>              <span class="token literal-property property">color</span><span class="token operator">:</span> #fff<span class="token punctuation">;</span>              <span class="token comment">// font-size: 12px;</span>            <span class="token punctuation">}</span>            <span class="token operator">&amp;</span><span class="token operator">:</span>nth<span class="token operator">-</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">2n</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">.</span>box_month <span class="token punctuation">{</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> 114px<span class="token punctuation">;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> 178px<span class="token punctuation">;</span>        ul <span class="token punctuation">{</span>          <span class="token literal-property property">height</span><span class="token operator">:</span> 178px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">&gt;</span> div <span class="token punctuation">{</span>      button <span class="token punctuation">{</span>        background<span class="token operator">-</span>color<span class="token operator">:</span> transparent <span class="token operator">!</span>important<span class="token punctuation">;</span>        <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token operator">:</span>hover <span class="token punctuation">{</span>          background<span class="token operator">-</span>color<span class="token operator">:</span> #e7ebf5<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>footer <span class="token punctuation">{</span>    margin<span class="token operator">-</span>top<span class="token operator">:</span> 5px<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">000</span><span class="token punctuation">;</span>    ul <span class="token punctuation">{</span>      <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token operator">:</span> end<span class="token punctuation">;</span>      margin<span class="token operator">-</span>right<span class="token operator">:</span> 10px<span class="token punctuation">;</span>      margin<span class="token operator">-</span>bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      li <span class="token punctuation">{</span>        margin<span class="token operator">-</span>left<span class="token operator">:</span> 10px<span class="token punctuation">;</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> 3px 8px<span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid #<span class="token number">999</span><span class="token punctuation">;</span>        border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>        font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>        <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token operator">:</span>last<span class="token operator">-</span>child <span class="token punctuation">{</span>          background<span class="token operator">-</span>color<span class="token operator">:</span> #1c67e5<span class="token punctuation">;</span>          <span class="token literal-property property">color</span><span class="token operator">:</span> #fff<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>calendar<span class="token operator">-</span>bar <span class="token punctuation">{</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> 40px<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">727272</span><span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span> 40px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token comment">/* background-color: #ebeef5; */</span>    button <span class="token punctuation">{</span>      i <span class="token punctuation">{</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">333</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>button <span class="token punctuation">{</span>    <span class="token literal-property property">border</span><span class="token operator">:</span> none<span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>button<span class="token operator">:</span>hover <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #eee<span class="token punctuation">;</span>    <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>ul<span class="token operator">-</span>week <span class="token punctuation">{</span>    <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    <span class="token comment">// margin: 5px 20px;</span>    <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token literal-property property">margin</span><span class="token operator">:</span> 8px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 10px<span class="token punctuation">;</span>    <span class="token comment">// border-bottom: 1px solid #eee;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">000</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> 13px<span class="token punctuation">;</span>    list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>li<span class="token operator">-</span>week <span class="token punctuation">{</span>    <span class="token literal-property property">display</span><span class="token operator">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>ul<span class="token operator">-</span>day <span class="token punctuation">{</span>    <span class="token literal-property property">display</span><span class="token operator">:</span> grid<span class="token punctuation">;</span>    grid<span class="token operator">-</span>template<span class="token operator">-</span>columns<span class="token operator">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> 30px<span class="token punctuation">)</span><span class="token punctuation">;</span>    grid<span class="token operator">-</span>template<span class="token operator">-</span>rows<span class="token operator">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> 30px<span class="token punctuation">)</span><span class="token punctuation">;</span>    align<span class="token operator">-</span>items<span class="token operator">:</span> start<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    margin<span class="token operator">-</span>bottom<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    list<span class="token operator">-</span>style<span class="token operator">:</span> none<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>li<span class="token operator">-</span>day <span class="token punctuation">{</span>    <span class="token literal-property property">display</span><span class="token operator">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>    <span class="token literal-property property">margin</span><span class="token operator">:</span> 1px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">000</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> 13px<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>li<span class="token operator">-</span>day<span class="token operator">:</span>hover <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #1c67e5<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #fff<span class="token punctuation">;</span>    <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>li<span class="token operator">-</span>day<span class="token punctuation">[</span>isThisMonth<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">190</span> <span class="token number">190</span> <span class="token number">190</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> 13px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>li<span class="token operator">-</span>day<span class="token punctuation">[</span>isThisMonth<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token operator">:</span>hover <span class="token punctuation">{</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #1c67e5<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #fff<span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> 15px<span class="token punctuation">;</span>    <span class="token literal-property property">cursor</span><span class="token operator">:</span> pointer<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">.</span>li<span class="token operator">-</span>day<span class="token punctuation">[</span>isThisMonth<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 5px<span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> #1c67e5<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token number">255</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>props</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Idate</span> <span class="token punctuation">{</span>  <span class="token literal-property property">year</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">month</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token literal-property property">date</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  isThisMonth<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  h<span class="token operator">?</span><span class="token operator">:</span> number <span class="token operator">|</span> string<span class="token punctuation">;</span>  m<span class="token operator">?</span><span class="token operator">:</span> number <span class="token operator">|</span> string<span class="token punctuation">;</span>  s<span class="token operator">?</span><span class="token operator">:</span> number <span class="token operator">|</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IDateDate</span> <span class="token punctuation">{</span>  <span class="token comment">/**时间 Date格式 */</span>  <span class="token literal-property property">$d</span><span class="token operator">:</span> Date<span class="token punctuation">;</span>  <span class="token comment">/**年*/</span>  $<span class="token constant">Y</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment">/**月*/</span>  $<span class="token constant">M</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment">/**日*/</span>  $<span class="token constant">D</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment">/**时*/</span>  $<span class="token constant">H</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment">/**分*/</span>  <span class="token literal-property property">$m</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment">/**秒*/</span>  <span class="token literal-property property">$s</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">;</span>  <span class="token comment">/**日期 年月日*/</span>  <span class="token literal-property property">$date</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token comment">/**时间 时分秒*/</span>  <span class="token literal-property property">$time</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有一些样式用到了 windcss 使用前可以先装一下哦 不然会有的变形不想装的也可以自己补下 css</p><p>用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>DatePicker <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mr-4"</span> @change<span class="token operator">=</span><span class="token string">"datePickerChangeHandel"</span> @ok<span class="token operator">=</span><span class="token string">"okHandel"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后数据是这样的</p><p><a href="https://imgse.com/i/pid7V0J"><img src="https://z1.ax1x.com/2023/11/23/pid7V0J.png" alt="pid7V0J.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让部署Qexo后台</title>
      <link href="/2023/11/13/ru-he-rang-bu-shu-qexo-hou-tai/"/>
      <url>/2023/11/13/ru-he-rang-bu-shu-qexo-hou-tai/</url>
      
        <content type="html"><![CDATA[<p>现在 Qexo 官网拉下最新的代码 <a href="https://github.com/Qexo/Qexo/releases">跳转</a></p><p>然后解压</p><pre class="line-numbers language-none"><code class="language-none">tar -xzf 文件名.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="首先查看-Python-和-pip3-的版本，如果不对应最好安装如图中的版本不容易出错"><a href="#首先查看-Python-和-pip3-的版本，如果不对应最好安装如图中的版本不容易出错" class="headerlink" title="首先查看 Python 和 pip3 的版本，如果不对应最好安装如图中的版本不容易出错"></a>首先查看 Python 和 pip3 的版本，如果不对应最好安装如图中的版本不容易出错</h4><p><img src="/img/py_v.png" alt="python和pip3版本"></p><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><p>以使用 Mysql 为例, 确认好安装相关依赖后在<code>manage.py</code>的同级目录下创建并修改 <code>configs.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import pymysqlpymysql.install_as_MySQLdb()DOMAINS = ["127.0.0.1", "yoursite.com"]DATABASES = {    'default': {            'ENGINE': 'django.db.backends.mysql',            'NAME': 'qexo',            'USER': 'root',            'PASSWORD': 'password',            'HOST': '127.0.0.1',            'PORT': '3306',            'OPTIONS': {                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'"            }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NAME 是数据库的名字；USER 是数据库的用户</p><p>然后在项目根目录依次执行如下</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pip3 install -r requirements.txtpython3 manage.py makemigrationspython3 manage.py migratepython3 manage.py runserver 0.0.0.0:8000 --noreload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="如果pip3-install-r-requirements-txt-时报错了，查看此文件夹，替换如下-requirements-txt"><a href="#如果pip3-install-r-requirements-txt-时报错了，查看此文件夹，替换如下-requirements-txt" class="headerlink" title="如果pip3 install -r requirements.txt 时报错了，查看此文件夹，替换如下 requirements.txt"></a>如果<code>pip3 install -r requirements.txt</code> 时报错了，查看此文件夹，替换如下 requirements.txt</h5><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">Django==3.2.18PyMySQLboto3requestsPyGithubpython-gitlabhtml2textPyYAMLurllib3Markdowndjongodjango-cors-headerspymongodnspythonsqlparsepsycopg2-binarycryptographypyopenssloss2beautifulsoup4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在 ip 下加 8000 端口查看能否进入项目</p><p>如果没问题 就先关闭 下面是常驻项目进程命令</p><h4 id="常驻项目进程"><a href="#常驻项目进程" class="headerlink" title="常驻项目进程"></a>常驻项目进程</h4><p><code>nohup python3 manage.py runserver 0.0.0.0:8000 --noreload</code></p><p>输入完没报错就成功了 然后直接关闭这个 cmd 窗口不要<code>ctrl+c</code></p><p>然后在你服务器 ip 加让 8000 端口就可以访问了</p><h3 id="停止进程"><a href="#停止进程" class="headerlink" title="停止进程"></a>停止进程</h3><p>如果你想关闭这个常驻进程 需要查询 8000 端口然后杀掉这个进程</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p><code>lsof -i :8000</code></p><p>根据上一步的输出，找到占用 8000 端口的进程的 PID（进程 ID）</p><p>使用 <code>kill</code> 命令终止该进程。将 <code>&lt;PID&gt;</code> 替换为实际的进程 ID</p><p><code>kill &lt;PID&gt;</code></p><h4 id="AMH"><a href="#AMH" class="headerlink" title="AMH"></a>AMH</h4><p><code>netstat -tlnp | grep 8000</code></p><p><code>kill &lt;PID&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Qexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何查看npm的镜像信息</title>
      <link href="/2023/11/02/cha-kan-npm-de-jing-xiang-xin-xi/"/>
      <url>/2023/11/02/cha-kan-npm-de-jing-xiang-xin-xi/</url>
      
        <content type="html"><![CDATA[<p>要查看 npm 的镜像信息，你可以使用<code>npm config get registry</code>命令。这个命令会返回当前配置的 npm 镜像地址。</p><p>如果你想要切换 npm 的镜像源，有以下几种选择：</p><ul><li><code>npm config set registry &lt;registry-url&gt;</code>：将 npm 的镜像源设置为指定的<code>&lt;registry-url&gt;</code>。</li><li><code>npm config delete registry</code>：删除已设置的 npm 镜像源，恢复默认的官方源。</li></ul><p>常见的 npm 镜像源包括：</p><ul><li>官方源（<a href="https://registry.npmjs.org/%EF%BC%89">https://registry.npmjs.org/）</a></li><li>淘宝 NPM 镜像源（<a href="https://registry.npm.taobao.org/%EF%BC%89">https://registry.npm.taobao.org/）</a></li><li>cnpmjs 镜像源（<a href="https://r.cnpmjs.org/%EF%BC%89">https://r.cnpmjs.org/）</a></li></ul><p>使用合适的 npm 镜像源可以加快依赖包的下载速度，提高开发效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows操作系统生成SSH密钥</title>
      <link href="/2023/11/02/windows-cao-zuo-xi-tong-sheng-cheng-ssh-mi-yao/"/>
      <url>/2023/11/02/windows-cao-zuo-xi-tong-sheng-cheng-ssh-mi-yao/</url>
      
        <content type="html"><![CDATA[<p><strong>在 Windows 上生成 SSH 密钥可以通过以下简单步骤：</strong></p><ol><li>创建公钥（如果在 cmd 窗口不可执行，请下载 gitbash 执行）</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh-keygen -t rsa -C "youremail@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>输入完毕后按回车，到底即可，此时 c 盘——用户——用户名——.ssh 文件夹 里面生成好了“id<em>rsa”和“id_rsa.pub”文件（</em>不一定是一样的位置，会有提示请以自己的目录为准_）。</li><li>将公钥添加到需要访问的服务器上的 authorized_keys 文件中。</li><li>使用私钥进行 SSH 连接。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windowns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue/cli创建项目＜template＞报错</title>
      <link href="/2023/10/17/vuecli-chuang-jian-xiang-mu-template-bao-cuo/"/>
      <url>/2023/10/17/vuecli-chuang-jian-xiang-mu-template-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h5 id="启动项目就报这种错误"><a href="#启动项目就报这种错误" class="headerlink" title="启动项目就报这种错误"></a>启动项目就报这种错误</h5><p><img src="/img/csd/1.png" alt="err"></p><p><img src="/img/csd/2.png" alt="err"></p><h6 id="一、首先在-vuter-插件中-扩展设置中吧-template-勾选去掉-默认是勾选的"><a href="#一、首先在-vuter-插件中-扩展设置中吧-template-勾选去掉-默认是勾选的" class="headerlink" title="一、首先在 vuter 插件中 扩展设置中吧 template 勾选去掉(默认是勾选的)"></a>一、首先在 vuter 插件中 扩展设置中吧 template 勾选去掉(默认是勾选的)</h6><p>如下（示例）</p><p><img src="/img/csd/3.png" alt="err"></p><p>然后重启 vscode 如果还是不行的话 下一步</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">"vueCompilerOptions": { "experimentalDisableTemplateSupport": true }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后重启 vscode 就好了</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的依赖收集</title>
      <link href="/2023/10/15/vue-de-yi-lai-shou-ji/"/>
      <url>/2023/10/15/vue-de-yi-lai-shou-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="让数据变得可观测"><a href="#让数据变得可观测" class="headerlink" title="让数据变得可观测"></a>让数据变得可观测</h3><p>我们都知道 Vue2 中是通过<code>Object.defineProperty</code>来实现的数据劫持，也就是让数据变得可观测 例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> <span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"price属性被读取了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"price属性被修改了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h3><p>让 object 数据变的可观测。变的可观测以后，我们就能知道数据什么时候发生了变化，那么当数据发生变化时，我们去通知视图更新就好了。那么问题又来了，视图那么大，我们到底该通知谁去变化？总不能一个数据变化了，把整个视图全部更新一遍吧，这样显然是不合理的。此时，你肯定会想到，视图里谁用到了这个数据就更新谁呗。对！你想的没错，就是这样.</p><p>在 Vvue 中是通过实现的一个 Dep 类来实现依赖收集 源码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 源码位置：src/core/observer/dep.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 删除一个依赖</span>  <span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 添加一个依赖</span>  <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 通知所有依赖更新</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Remove an item from an array */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的依赖管理器 Dep 类中，我们先初始化了一个 subs 数组，用来存放依赖，并且定义了几个实例方法用来对依赖进行添加，删除，通知等操作。</p><p>有了依赖管理器后，我们就可以在 getter 中收集依赖，在 setter 中通知依赖更新了，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实例化一个依赖管理器，生成一个依赖管理数组dep</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在getter中收集依赖</span>      <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在setter中通知依赖更新</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们在 getter 中调用了 dep.depend()方法收集依赖，在 setter 中调用 dep.notify()方法通知所有依赖更新</p><h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><p>谁用到了数据，谁就是依赖，我们就为谁创建一个<code>Watcher</code>实例。在之后数据变化时，我们不直接去通知依赖更新，而是通知依赖对应的 Watch 实例，由<code>Watcher</code>实例去通知真正的视图</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Parse simple path. * 把一个形如'data.a.b.c'的字符串路径所表示的值，从真实的data对象中取出来 * 例如： * data = {a:{b:{c:2}}} * parsePath('a.b.c')(data)  // 2 */</span><span class="token keyword">const</span> bailRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\w.$]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parsePath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bailRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> segments <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      obj <span class="token operator">=</span> obj<span class="token punctuation">[</span>segments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Watcher</code>先把自己设置到全局唯一的指定位置（window.target），然后读取数据。因为读取了数据，所以会触发这个数据的 getter。接着，在 getter 中就会从全局唯一的那个位置读取当前正在读取数据的 Watcher，并把这个 watcher 收集到 Dep 中去。收集好之后，当数据发生变化时，会向 Dep 中的每个 Watcher 发送通知。通过这样的方式，Watcher 可以主动去订阅任意一个数据的变化</p><p>以上，就彻底完成了对 Object 数据的侦测，依赖收集，依赖的更新等所有操作</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于微信前端支付在微信环境如何支付</title>
      <link href="/2023/10/15/weichart/"/>
      <url>/2023/10/15/weichart/</url>
      
        <content type="html"><![CDATA[<h3 id="关于微信前端支付在微信环境如何支付"><a href="#关于微信前端支付在微信环境如何支付" class="headerlink" title="关于微信前端支付在微信环境如何支付"></a>关于微信前端支付在微信环境如何支付</h3><p>我们都知道在微信环境中是无法直接使用 H5 支付的，需要调取微信浏览器一些相关 API 去唤醒支付,相关链接如下：</p><p><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6</a></p><p><strong>注意：WeixinJSBridge 内置对象在其他浏览器中无效。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onBridgeReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  WeixinJSBridge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>    <span class="token string">"getBrandWCPayRequest"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token literal-property property">appId</span><span class="token operator">:</span> <span class="token string">"wx2421b1c4370ec43b"</span><span class="token punctuation">,</span> <span class="token comment">//公众号ID，由商户传入</span>      <span class="token literal-property property">timeStamp</span><span class="token operator">:</span> <span class="token string">"1395712654"</span><span class="token punctuation">,</span> <span class="token comment">//时间戳，自1970年以来的秒数</span>      <span class="token literal-property property">nonceStr</span><span class="token operator">:</span> <span class="token string">"e61463f8efa94090b1f366cccfbbb444"</span><span class="token punctuation">,</span> <span class="token comment">//随机串</span>      <span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">"prepay_id=u802345jgfjsdfgsdg888"</span><span class="token punctuation">,</span>      <span class="token literal-property property">signType</span><span class="token operator">:</span> <span class="token string">"MD5"</span><span class="token punctuation">,</span> <span class="token comment">//微信签名方式：</span>      <span class="token literal-property property">paySign</span><span class="token operator">:</span> <span class="token string">"70EA570631E4BB79628FBCA90534C63FF7FADD89"</span><span class="token punctuation">,</span> <span class="token comment">//微信签名</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>err_msg <span class="token operator">==</span> <span class="token string">"get_brand_wcpay_request:ok"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用以上方式判断前端返回,微信团队郑重提示：</span>        <span class="token comment">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> WeixinJSBridge <span class="token operator">==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span><span class="token punctuation">,</span> onBridgeReady<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span><span class="token punctuation">,</span> onBridgeReady<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onWeixinJSBridgeReady"</span><span class="token punctuation">,</span> onBridgeReady<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">onBridgeReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那后端支付的时候是需要用户的<strong>appid</strong>的那这时候我们在客户端应该如何获取呢？其实微信官方文档有很详细的解说：</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html</a></p><p>我们是要走网页授权的方式只获取 appid 的话可以走无感授权，如果需要获取用户详细信息则需要用户手动点击</p><blockquote><p>网页授权流程分为四步：<br>引导用户进入授权页面同意授权，获取 code<br>通过 code 换取网页授权 access_token（与基础支持中的 access_token 不同）<br>如果需要，开发者可以刷新网页授权 access_token，避免过期<br>通过网页授权 access_token 和 openid 获取用户基本信息（支持 UnionID 机制）</p></blockquote><p>然后我们可以通过 H5 静默授权获得到唯一的<strong>code</strong>码然后传给后端，后端去拿这个<strong>code</strong>码去换取用户的<strong>appid</strong>（因为前端优有跨域），然后就可以调取我前面说的 API 去唤醒支付了</p>]]></content>
      
      
      <categories>
          
          <category> 分享转载 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins如何自动化部署前端项目(安装Jenkins)</title>
      <link href="/2023/08/01/jenkins/"/>
      <url>/2023/08/01/jenkins/</url>
      
        <content type="html"><![CDATA[<h3 id="Jenkins-如何自动化部署前端项目"><a href="#Jenkins-如何自动化部署前端项目" class="headerlink" title="Jenkins 如何自动化部署前端项目"></a>Jenkins 如何自动化部署前端项目</h3><h4 id="1、安装-JDK-11-这里我们通过-yum-系统-Centos-8-4-64"><a href="#1、安装-JDK-11-这里我们通过-yum-系统-Centos-8-4-64" class="headerlink" title="1、安装 JDK 11 这里我们通过 yum 系统 Centos 8.4.64"></a>1、安装 JDK 11 这里我们通过 yum 系统 Centos 8.4.64</h4><ol><li>首先，确保你的系统已经更新到最新的软件包列表。可以运行以下命令来更新软件包列表：</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sudo yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="安装-JDK-11"><a href="#安装-JDK-11" class="headerlink" title="安装 JDK 11"></a>安装 JDK 11</h6><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sudo yum install java-11-openjdk-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装过程中，系统会提示你确认是否继续安装。输入<code>Y</code>并按下 Enter 键，然后等待安装完成。</li><li>安装完成后，可以使用以下命令来验证 JDK 11 的安装：</li></ol><h6 id="验证-Java-是否安装成功"><a href="#验证-Java-是否安装成功" class="headerlink" title="验证 Java 是否安装成功"></a>验证 Java 是否安装成功</h6><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出应该显示类似以下内容：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">openjdk version "11.x.x" 2021-XX-XXOpenJDK Runtime Environment (build 11.x.x+XX-XXXX)OpenJDK 64-Bit Server VM (build 11.x.x+XX-XXXX, mixed mode, sharing)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="卸载-Jdk"><a href="#卸载-Jdk" class="headerlink" title="卸载 Jdk"></a>卸载 Jdk</h6><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 查看CentOS自带JDK是否已安装:yum list installed | grep java# 如果存在自带的jdk，删除自带的jdkyum -y remove java-1.8.0-openjdk*yum -y remove tzdata-java.noarch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、安装-Jenkins"><a href="#2、安装-Jenkins" class="headerlink" title="2、安装 Jenkins"></a>2、安装 Jenkins</h4><p>首先，添加 Jenkins 的官方软件包源。打开终端窗口，并使用以下命令导入 Jenkins 的 GPG 密钥：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sudo wget -O /etc/yum.repos.d/jenkins.repo \    https://pkg.jenkins.io/redhat/jenkins.reposudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io-2023.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后安装 安装过程中，系统会提示你确认是否继续安装。输入<code>Y</code>并按下 Enter 键，然后等待安装完成</p><p><code>sudo yum install jenkins</code></p><h6 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h6><p>您可以使用以下命令启动 Jenkins 服务：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sudo systemctl start jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="您可以使用以下命令检查-Jenkins-服务的状态："><a href="#您可以使用以下命令检查-Jenkins-服务的状态：" class="headerlink" title="您可以使用以下命令检查 Jenkins 服务的状态："></a>您可以使用以下命令检查 Jenkins 服务的状态：</h6><p><code>sudo systemctl status jenkins</code></p><p>如下：</p><p><img src="/img/demo.png" alt="图"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins如何自动化部署前端项目(2)</title>
      <link href="/2023/08/01/jenkins2/"/>
      <url>/2023/08/01/jenkins2/</url>
      
        <content type="html"><![CDATA[<h3 id="Jenkins-如何自动化部署前端项目"><a href="#Jenkins-如何自动化部署前端项目" class="headerlink" title="Jenkins 如何自动化部署前端项目"></a>Jenkins 如何自动化部署前端项目</h3><p>前置步骤我们都操作完了，这篇开始介绍 jenkins 的是哟。话不多说，看操作(没安装的请看我主页有详细的安装教程)</p><p>1、登录进入 jenkins 后会让你选择安装插件，选择第一个默认的就行。</p><p>2、配置 JDK 和 Git 都需要执行路径，所以需要先把执行路径找到，先进入服务器的终端界面执行</p><blockquote><p>JDK 的路径</p></blockquote><pre class="line-numbers language-none"><code class="language-none">echo $JAVA_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是空记得先去设置 java 的环境变量 <code>which java</code> 查看 java 的安装路径</p><p><img src="/img/j/1.png" alt="jdk路径"></p><blockquote><p>Git 的路径</p></blockquote><pre class="line-numbers language-none"><code class="language-none">which git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/j/2.png" alt="git路径"></p><p>3、先配置 JDK 和 Git。点击：Manage Jenkins&gt;&gt;Global Tool Configuration</p><p><img src="/img/j/3.png"></p><p><img src="/img/j/4.png"></p><p>选择 JDK，别名随便填，JAVA_HOME 填写查询到 jdk 的路径</p><p><img src="/img/j/5.png"></p><p>选择 Git，Name 随便填 e 填写 2.2 查询到 git 的路径，配置完成后点击应用，在点击保存。</p><p><img src="/img/j/6.png"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装插件，点击 Manage Jenkins&gt;&gt;Manage Plugins，点击可选插件</p><p><img src="/img/j/7.png"></p><p><img src="/img/j/8.png"></p><p>安装 Gitee 插件，找到可选插件 tab，搜索 gitee<br><img src="/img/j/9.png"></p><p>安装 Maven 插件<br><img src="/img/j/10.png"></p><p>安装 Git Parameter Plug-In 插件，用于添加 git 参数<br><img src="/img/j/11.png"></p><p>安装 Environment Injector 插件，搜索 inject，此插件可以在 shell 脚本中可以使用 $a、$b 等自定义环境变量<br><img src="/img/j/12.png"></p><p>安装 Publish over SSH 插件<br><img src="/img/j/13.png"></p><h4 id="必须要配置-name-和-email，为了让每一次提交的代码都能配置到用户"><a href="#必须要配置-name-和-email，为了让每一次提交的代码都能配置到用户" class="headerlink" title="必须要配置 name 和 email，为了让每一次提交的代码都能配置到用户"></a>必须要配置 name 和 email，为了让每一次提交的代码都能配置到用户</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">git config --global user.name "jenkins_git"git config --global user.email "wuqi_y@163.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成证书 绑定 gitee 或者 github</p><h2 id="SSH-公钥"><a href="#SSH-公钥" class="headerlink" title="SSH 公钥"></a>SSH 公钥</h2><pre class="line-numbers language-none"><code class="language-none"># 生成ssh连接所需的证书ssh-keygen -t rsa -C "wuqi_y@163.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="将证书配置到-git-上。"><a href="#将证书配置到-git-上。" class="headerlink" title="将证书配置到 git 上。"></a>将证书配置到 git 上。</h3><p>登录 github 或 gitee，这里我以 gitee 为例，步骤如下：<br>   登录并进入 gitee 个人设置 – 点击“SSH 公钥”侧边栏 – 输入标题 – 黏贴刚才在 linux 上生成 id_rsa.pub 文件内容后保存。</p><h3 id="添加-Gitee-配置（Manage-Jenkins-gt-gt-Configure-System-gt-gt-Gitee-配置）"><a href="#添加-Gitee-配置（Manage-Jenkins-gt-gt-Configure-System-gt-gt-Gitee-配置）" class="headerlink" title="添加 Gitee 配置（Manage Jenkins>>Configure System>>Gitee 配置）"></a>添加 Gitee 配置（Manage Jenkins&gt;&gt;Configure System&gt;&gt;Gitee 配置）</h3><p><img src="/img/j/14.png"></p><p><img src="/img/j/15.png"></p><p><img src="/img/j/16.png"></p><p><img src="/img/j/17.png"><br><img src="/img/j/18.png"><br><img src="/img/j/19.png"><br><img src="/img/j/20.png"><br><img src="/img/j/21.png"><br>可根据自己需要更改(记得安装 Node 哦)</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 在执行过程中若遇到使用了未定义的变量或命令返回值为非零，将直接报错退出set -euecho "&lt;--------------------------------------&gt;"node -vecho "安装依赖"npm installecho "&lt;--------------------------------------&gt;"echo "打包出dist文件夹"npm run build# 先删除nginx下的旧数据sudo rm -rf /www/wwwroot/test-jenks/*# 再将新数据拷贝到nginx下sudo cp -r dist/* /www/wwwroot/test-jenks/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后执行即可<br><img src="/img/j/22.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
